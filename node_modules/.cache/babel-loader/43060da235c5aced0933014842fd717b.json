{"ast":null,"code":"var List = require('../../utils/list.js');\n\nvar packNumber = require('./Number.js').pack; // http://www.w3.org/TR/css3-color/#svg-color\n\n\nvar NAME_TO_HEX = {\n  'aliceblue': 'f0f8ff',\n  'antiquewhite': 'faebd7',\n  'aqua': '0ff',\n  'aquamarine': '7fffd4',\n  'azure': 'f0ffff',\n  'beige': 'f5f5dc',\n  'bisque': 'ffe4c4',\n  'black': '000',\n  'blanchedalmond': 'ffebcd',\n  'blue': '00f',\n  'blueviolet': '8a2be2',\n  'brown': 'a52a2a',\n  'burlywood': 'deb887',\n  'cadetblue': '5f9ea0',\n  'chartreuse': '7fff00',\n  'chocolate': 'd2691e',\n  'coral': 'ff7f50',\n  'cornflowerblue': '6495ed',\n  'cornsilk': 'fff8dc',\n  'crimson': 'dc143c',\n  'cyan': '0ff',\n  'darkblue': '00008b',\n  'darkcyan': '008b8b',\n  'darkgoldenrod': 'b8860b',\n  'darkgray': 'a9a9a9',\n  'darkgrey': 'a9a9a9',\n  'darkgreen': '006400',\n  'darkkhaki': 'bdb76b',\n  'darkmagenta': '8b008b',\n  'darkolivegreen': '556b2f',\n  'darkorange': 'ff8c00',\n  'darkorchid': '9932cc',\n  'darkred': '8b0000',\n  'darksalmon': 'e9967a',\n  'darkseagreen': '8fbc8f',\n  'darkslateblue': '483d8b',\n  'darkslategray': '2f4f4f',\n  'darkslategrey': '2f4f4f',\n  'darkturquoise': '00ced1',\n  'darkviolet': '9400d3',\n  'deeppink': 'ff1493',\n  'deepskyblue': '00bfff',\n  'dimgray': '696969',\n  'dimgrey': '696969',\n  'dodgerblue': '1e90ff',\n  'firebrick': 'b22222',\n  'floralwhite': 'fffaf0',\n  'forestgreen': '228b22',\n  'fuchsia': 'f0f',\n  'gainsboro': 'dcdcdc',\n  'ghostwhite': 'f8f8ff',\n  'gold': 'ffd700',\n  'goldenrod': 'daa520',\n  'gray': '808080',\n  'grey': '808080',\n  'green': '008000',\n  'greenyellow': 'adff2f',\n  'honeydew': 'f0fff0',\n  'hotpink': 'ff69b4',\n  'indianred': 'cd5c5c',\n  'indigo': '4b0082',\n  'ivory': 'fffff0',\n  'khaki': 'f0e68c',\n  'lavender': 'e6e6fa',\n  'lavenderblush': 'fff0f5',\n  'lawngreen': '7cfc00',\n  'lemonchiffon': 'fffacd',\n  'lightblue': 'add8e6',\n  'lightcoral': 'f08080',\n  'lightcyan': 'e0ffff',\n  'lightgoldenrodyellow': 'fafad2',\n  'lightgray': 'd3d3d3',\n  'lightgrey': 'd3d3d3',\n  'lightgreen': '90ee90',\n  'lightpink': 'ffb6c1',\n  'lightsalmon': 'ffa07a',\n  'lightseagreen': '20b2aa',\n  'lightskyblue': '87cefa',\n  'lightslategray': '789',\n  'lightslategrey': '789',\n  'lightsteelblue': 'b0c4de',\n  'lightyellow': 'ffffe0',\n  'lime': '0f0',\n  'limegreen': '32cd32',\n  'linen': 'faf0e6',\n  'magenta': 'f0f',\n  'maroon': '800000',\n  'mediumaquamarine': '66cdaa',\n  'mediumblue': '0000cd',\n  'mediumorchid': 'ba55d3',\n  'mediumpurple': '9370db',\n  'mediumseagreen': '3cb371',\n  'mediumslateblue': '7b68ee',\n  'mediumspringgreen': '00fa9a',\n  'mediumturquoise': '48d1cc',\n  'mediumvioletred': 'c71585',\n  'midnightblue': '191970',\n  'mintcream': 'f5fffa',\n  'mistyrose': 'ffe4e1',\n  'moccasin': 'ffe4b5',\n  'navajowhite': 'ffdead',\n  'navy': '000080',\n  'oldlace': 'fdf5e6',\n  'olive': '808000',\n  'olivedrab': '6b8e23',\n  'orange': 'ffa500',\n  'orangered': 'ff4500',\n  'orchid': 'da70d6',\n  'palegoldenrod': 'eee8aa',\n  'palegreen': '98fb98',\n  'paleturquoise': 'afeeee',\n  'palevioletred': 'db7093',\n  'papayawhip': 'ffefd5',\n  'peachpuff': 'ffdab9',\n  'peru': 'cd853f',\n  'pink': 'ffc0cb',\n  'plum': 'dda0dd',\n  'powderblue': 'b0e0e6',\n  'purple': '800080',\n  'rebeccapurple': '639',\n  'red': 'f00',\n  'rosybrown': 'bc8f8f',\n  'royalblue': '4169e1',\n  'saddlebrown': '8b4513',\n  'salmon': 'fa8072',\n  'sandybrown': 'f4a460',\n  'seagreen': '2e8b57',\n  'seashell': 'fff5ee',\n  'sienna': 'a0522d',\n  'silver': 'c0c0c0',\n  'skyblue': '87ceeb',\n  'slateblue': '6a5acd',\n  'slategray': '708090',\n  'slategrey': '708090',\n  'snow': 'fffafa',\n  'springgreen': '00ff7f',\n  'steelblue': '4682b4',\n  'tan': 'd2b48c',\n  'teal': '008080',\n  'thistle': 'd8bfd8',\n  'tomato': 'ff6347',\n  'turquoise': '40e0d0',\n  'violet': 'ee82ee',\n  'wheat': 'f5deb3',\n  'white': 'fff',\n  'whitesmoke': 'f5f5f5',\n  'yellow': 'ff0',\n  'yellowgreen': '9acd32'\n};\nvar HEX_TO_NAME = {\n  '800000': 'maroon',\n  '800080': 'purple',\n  '808000': 'olive',\n  '808080': 'gray',\n  '00ffff': 'cyan',\n  'f0ffff': 'azure',\n  'f5f5dc': 'beige',\n  'ffe4c4': 'bisque',\n  '000000': 'black',\n  '0000ff': 'blue',\n  'a52a2a': 'brown',\n  'ff7f50': 'coral',\n  'ffd700': 'gold',\n  '008000': 'green',\n  '4b0082': 'indigo',\n  'fffff0': 'ivory',\n  'f0e68c': 'khaki',\n  '00ff00': 'lime',\n  'faf0e6': 'linen',\n  '000080': 'navy',\n  'ffa500': 'orange',\n  'da70d6': 'orchid',\n  'cd853f': 'peru',\n  'ffc0cb': 'pink',\n  'dda0dd': 'plum',\n  'f00': 'red',\n  'ff0000': 'red',\n  'fa8072': 'salmon',\n  'a0522d': 'sienna',\n  'c0c0c0': 'silver',\n  'fffafa': 'snow',\n  'd2b48c': 'tan',\n  '008080': 'teal',\n  'ff6347': 'tomato',\n  'ee82ee': 'violet',\n  'f5deb3': 'wheat',\n  'ffffff': 'white',\n  'ffff00': 'yellow'\n};\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l, a) {\n  var r;\n  var g;\n  var b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a];\n}\n\nfunction toHex(value) {\n  value = value.toString(16);\n  return value.length === 1 ? '0' + value : value;\n}\n\nfunction parseFunctionArgs(functionArgs, count, rgb) {\n  var argument = functionArgs.head;\n  var args = [];\n\n  while (argument !== null) {\n    var argumentPart = argument.data.sequence.head;\n    var wasValue = false;\n\n    while (argumentPart !== null) {\n      var value = argumentPart.data;\n      var type = value.type;\n\n      switch (type) {\n        case 'Number':\n        case 'Percentage':\n          if (wasValue) {\n            return;\n          }\n\n          wasValue = true;\n          args.push({\n            type: type,\n            value: Number(value.value)\n          });\n          break;\n\n        case 'Operator':\n          if (wasValue || value.value !== '+') {\n            return;\n          }\n\n          break;\n\n        default:\n          // something we couldn't understand\n          return;\n      }\n\n      argumentPart = argumentPart.next;\n    }\n\n    argument = argument.next;\n  }\n\n  if (args.length !== count) {\n    // invalid arguments count\n    // TODO: remove those tokens\n    return;\n  }\n\n  if (args.length === 4) {\n    if (args[3].type !== 'Number') {\n      // 4th argument should be a number\n      // TODO: remove those tokens\n      return;\n    }\n\n    args[3].type = 'Alpha';\n  }\n\n  if (rgb) {\n    if (args[0].type !== args[1].type || args[0].type !== args[2].type) {\n      // invalid color, numbers and percentage shouldn't be mixed\n      // TODO: remove those tokens\n      return;\n    }\n  } else {\n    if (args[0].type !== 'Number' || args[1].type !== 'Percentage' || args[2].type !== 'Percentage') {\n      // invalid color, for hsl values should be: number, percentage, percentage\n      // TODO: remove those tokens\n      return;\n    }\n\n    args[0].type = 'Angle';\n  }\n\n  return args.map(function (arg) {\n    var value = Math.max(0, arg.value);\n\n    switch (arg.type) {\n      case 'Number':\n        // fit value to [0..255] range\n        value = Math.min(value, 255);\n        break;\n\n      case 'Percentage':\n        // convert 0..100% to value in [0..255] range\n        value = Math.min(value, 100) / 100;\n\n        if (!rgb) {\n          return value;\n        }\n\n        value = 255 * value;\n        break;\n\n      case 'Angle':\n        // fit value to (-360..360) range\n        return (value % 360 + 360) % 360 / 360;\n\n      case 'Alpha':\n        // fit value to [0..1] range\n        return Math.min(value, 1);\n    }\n\n    return Math.round(value);\n  });\n}\n\nfunction compressFunction(node, item, list) {\n  var functionName = node.name;\n  var args;\n\n  if (functionName === 'rgba' || functionName === 'hsla') {\n    args = parseFunctionArgs(node.arguments, 4, functionName === 'rgba');\n\n    if (!args) {\n      // something went wrong\n      return;\n    }\n\n    if (functionName === 'hsla') {\n      args = hslToRgb.apply(null, args);\n      node.name = 'rgba';\n    }\n\n    if (args[3] !== 1) {\n      // replace argument values for normalized/interpolated\n      node.arguments.each(function (argument) {\n        var item = argument.sequence.head;\n\n        if (item.data.type === 'Operator') {\n          item = item.next;\n        }\n\n        argument.sequence = new List([{\n          type: 'Number',\n          info: item.data.info,\n          value: packNumber(args.shift())\n        }]);\n      });\n      return;\n    } // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)\n\n\n    functionName = 'rgb';\n  }\n\n  if (functionName === 'hsl') {\n    args = args || parseFunctionArgs(node.arguments, 3, false);\n\n    if (!args) {\n      // something went wrong\n      return;\n    } // convert to rgb\n\n\n    args = hslToRgb.apply(null, args);\n    functionName = 'rgb';\n  }\n\n  if (functionName === 'rgb') {\n    args = args || parseFunctionArgs(node.arguments, 3, true);\n\n    if (!args) {\n      // something went wrong\n      return;\n    } // check if color is not at the end and not followed by space\n\n\n    var next = item.next;\n\n    if (next && next.data.type !== 'Space') {\n      list.insert(list.createItem({\n        type: 'Space'\n      }), next);\n    }\n\n    item.data = {\n      type: 'Hash',\n      info: node.info,\n      value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])\n    };\n    compressHex(item.data, item);\n  }\n}\n\nfunction compressIdent(node, item) {\n  if (this.declaration === null) {\n    return;\n  }\n\n  var color = node.name.toLowerCase();\n\n  if (NAME_TO_HEX.hasOwnProperty(color)) {\n    var hex = NAME_TO_HEX[color];\n\n    if (hex.length + 1 <= color.length) {\n      // replace for shorter hex value\n      item.data = {\n        type: 'Hash',\n        info: node.info,\n        value: hex\n      };\n    } else {\n      // special case for consistent colors\n      if (color === 'grey') {\n        color = 'gray';\n      } // just replace value for lower cased name\n\n\n      node.name = color;\n    }\n  }\n}\n\nfunction compressHex(node, item) {\n  var color = node.value.toLowerCase(); // #112233 -> #123\n\n  if (color.length === 6 && color[0] === color[1] && color[2] === color[3] && color[4] === color[5]) {\n    color = color[0] + color[2] + color[4];\n  }\n\n  if (HEX_TO_NAME[color]) {\n    item.data = {\n      type: 'Identifier',\n      info: node.info,\n      name: HEX_TO_NAME[color]\n    };\n  } else {\n    node.value = color;\n  }\n}\n\nmodule.exports = {\n  compressFunction: compressFunction,\n  compressIdent: compressIdent,\n  compressHex: compressHex\n};","map":null,"metadata":{},"sourceType":"script"}