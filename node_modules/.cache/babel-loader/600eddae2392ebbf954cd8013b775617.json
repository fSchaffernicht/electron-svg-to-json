{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'merges multiple paths in one if possible';\nexports.params = {\n  collapseRepeated: true,\n  leadingZero: true,\n  negativeExtraSpace: true\n};\n\nvar path2js = require('./_path.js').path2js,\n    js2path = require('./_path.js').js2path,\n    intersects = require('./_path.js').intersects;\n/**\n * Merge multiple Paths into one.\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich, Lev Solntsev\n */\n\n\nexports.fn = function (item, params) {\n  if (!item.isElem() || item.isEmpty()) return;\n  var prevContentItem = null,\n      prevContentItemKeys = null;\n  item.content = item.content.filter(function (contentItem) {\n    if (prevContentItem && prevContentItem.isElem('path') && prevContentItem.isEmpty() && prevContentItem.hasAttr('d') && contentItem.isElem('path') && contentItem.isEmpty() && contentItem.hasAttr('d')) {\n      if (!prevContentItemKeys) {\n        prevContentItemKeys = Object.keys(prevContentItem.attrs);\n      }\n\n      var contentItemAttrs = Object.keys(contentItem.attrs),\n          equalData = prevContentItemKeys.length == contentItemAttrs.length && contentItemAttrs.every(function (key) {\n        return key == 'd' || prevContentItem.hasAttr(key) && prevContentItem.attr(key).value == contentItem.attr(key).value;\n      }),\n          prevPathJS = path2js(prevContentItem),\n          curPathJS = path2js(contentItem);\n\n      if (equalData && !intersects(prevPathJS, curPathJS)) {\n        js2path(prevContentItem, prevPathJS.concat(curPathJS), params);\n        return false;\n      }\n    }\n\n    prevContentItem = contentItem;\n    prevContentItemKeys = null;\n    return true;\n  });\n};","map":null,"metadata":{},"sourceType":"script"}