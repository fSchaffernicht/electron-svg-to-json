{"ast":null,"code":"var utils = require('./utils.js');\n\nvar walkRules = require('../../utils/walk.js').rules;\n\nfunction processRuleset(node, item, list) {\n  var selectors = node.selector.selectors;\n  var declarations = node.block.declarations;\n  list.prevUntil(item.prev, function (prev) {\n    // skip non-ruleset node if safe\n    if (prev.type !== 'Ruleset') {\n      return utils.unsafeToSkipNode.call(selectors, prev);\n    }\n\n    var prevSelectors = prev.selector.selectors;\n    var prevDeclarations = prev.block.declarations; // try to join rulesets with equal pseudo signature\n\n    if (node.pseudoSignature === prev.pseudoSignature) {\n      // try to join by selectors\n      if (utils.isEqualLists(prevSelectors, selectors)) {\n        prevDeclarations.appendList(declarations);\n        list.remove(item);\n        return true;\n      } // try to join by declarations\n\n\n      if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n        utils.addSelectors(prevSelectors, selectors);\n        list.remove(item);\n        return true;\n      }\n    } // go to prev ruleset if has no selector similarities\n\n\n    return utils.hasSimilarSelectors(selectors, prevSelectors);\n  });\n}\n\n; // NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\n\nmodule.exports = function initialMergeRuleset(ast) {\n  walkRules(ast, function (node, item, list) {\n    if (node.type === 'Ruleset') {\n      processRuleset(node, item, list);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}