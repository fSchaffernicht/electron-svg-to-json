{"ast":null,"code":"'use strict';\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @param {String} str input string\n * @param {String} type Data URI type\n * @return {String} output string\n */\n\nexports.encodeSVGDatauri = function (str, type) {\n  var prefix = 'data:image/svg+xml'; // base64\n\n  if (!type || type === 'base64') {\n    prefix += ';base64,';\n    str = prefix + new Buffer(str).toString('base64'); // URI encoded\n  } else if (type === 'enc') {\n    str = prefix + ',' + encodeURIComponent(str); // unencoded\n  } else if (type === 'unenc') {\n    str = prefix + ',' + str;\n  }\n\n  return str;\n};\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @param {string} str input string\n * @return {String} output string\n */\n\n\nexports.decodeSVGDatauri = function (str) {\n  var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n  var match = regexp.exec(str); // plain string\n\n  if (!match) return str;\n  var data = match[3]; // base64\n\n  if (match[2]) {\n    str = new Buffer(data, 'base64').toString('utf8'); // URI encoded\n  } else if (data.charAt(0) === '%') {\n    str = decodeURIComponent(data); // unencoded\n  } else if (data.charAt(0) === '<') {\n    str = data;\n  }\n\n  return str;\n};\n\nexports.intersectArrays = function (a, b) {\n  return a.filter(function (n) {\n    return b.indexOf(n) > -1;\n  });\n};\n\nexports.cleanupOutData = function (data, params) {\n  var str = '',\n      delimiter,\n      prev;\n  data.forEach(function (item, i) {\n    // space delimiter by default\n    delimiter = ' '; // no extra space in front of first number\n\n    if (i === 0) {\n      delimiter = '';\n    } // remove floating-point numbers leading zeros\n    // 0.5 → .5\n    // -0.5 → -.5\n\n\n    if (params.leadingZero) {\n      item = removeLeadingZero(item);\n    } // no extra space in front of negative number or\n    // in front of a floating number if a previous number is floating too\n\n\n    if (params.negativeExtraSpace && (item < 0 || /^\\./.test(item) && prev % 1 !== 0)) {\n      delimiter = '';\n    } // save prev item value\n\n\n    prev = item;\n    str += delimiter + item;\n  });\n  return str;\n};\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @param {Float} num input number\n *\n * @return {String} output number as string\n */\n\n\nvar removeLeadingZero = exports.removeLeadingZero = function (num) {\n  if (num > 0 && num < 1) {\n    num = ('' + num).slice(1);\n  } else if (num < 0 && num > -1) {\n    num = '-' + ('' + num).slice(2);\n  }\n\n  return num;\n};","map":null,"metadata":{},"sourceType":"script"}