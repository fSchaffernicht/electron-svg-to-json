{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'converts basic shapes to more compact path form';\nvar none = {\n  value: 0\n},\n    regNumber = /[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?/g;\n/**\n * Converts basic shape to more compact path.\n * It also allows further optimizations like\n * combining paths with similar attributes.\n *\n * @see http://www.w3.org/TR/SVG/shapes.html\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Lev Solntsev\n */\n\nexports.fn = function (item) {\n  if (item.isElem('rect') && item.hasAttr('width') && item.hasAttr('height') && !item.hasAttr('rx') && !item.hasAttr('ry')) {\n    var x = +(item.attr('x') || none).value,\n        y = +(item.attr('y') || none).value,\n        width = +item.attr('width').value,\n        height = +item.attr('height').value; // Values like '100%' compute to NaN, thus running after\n    // cleanupNumericValues when 'px' units has already been removed.\n    // TODO: Calculate sizes from % and non-px units if possible.\n\n    if (isNaN(x - y + width - height)) return;\n    var pathData = 'M' + x + ' ' + y + 'H' + (x + width) + 'V' + (y + height) + 'H' + x + 'z';\n    item.addAttr({\n      name: 'd',\n      value: pathData,\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr(['x', 'y', 'width', 'height']);\n  } else if (item.isElem('line')) {\n    var x1 = +(item.attr('x1') || none).value,\n        y1 = +(item.attr('y1') || none).value,\n        x2 = +(item.attr('x2') || none).value,\n        y2 = +(item.attr('y2') || none).value;\n    if (isNaN(x1 - y1 + x2 - y2)) return;\n    item.addAttr({\n      name: 'd',\n      value: 'M' + x1 + ' ' + y1 + 'L' + x2 + ' ' + y2,\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr(['x1', 'y1', 'x2', 'y2']);\n  } else if ((item.isElem('polyline') || item.isElem('polygon')) && item.hasAttr('points')) {\n    var coords = (item.attr('points').value.match(regNumber) || []).map(Number);\n    if (coords.length < 4) return false;\n    item.addAttr({\n      name: 'd',\n      value: 'M' + coords.slice(0, 2).join(' ') + 'L' + coords.slice(2).join(' ') + (item.isElem('polygon') ? 'z' : ''),\n      prefix: '',\n      local: 'd'\n    });\n    item.renameElem('path').removeAttr('points');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}