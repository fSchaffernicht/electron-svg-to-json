{"ast":null,"code":"var hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isEqualLists(a, b) {\n  var cursor1 = a.head;\n  var cursor2 = b.head;\n\n  while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n    cursor1 = cursor1.next;\n    cursor2 = cursor2.next;\n  }\n\n  return cursor1 === null && cursor2 === null;\n}\n\nfunction isEqualDeclarations(a, b) {\n  var cursor1 = a.head;\n  var cursor2 = b.head;\n\n  while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n    cursor1 = cursor1.next;\n    cursor2 = cursor2.next;\n  }\n\n  return cursor1 === null && cursor2 === null;\n}\n\nfunction compareDeclarations(declarations1, declarations2) {\n  var result = {\n    eq: [],\n    ne1: [],\n    ne2: [],\n    ne2overrided: []\n  };\n  var fingerprints = Object.create(null);\n  var declarations2hash = Object.create(null);\n\n  for (var cursor = declarations2.head; cursor; cursor = cursor.next) {\n    declarations2hash[cursor.data.id] = true;\n  }\n\n  for (var cursor = declarations1.head; cursor; cursor = cursor.next) {\n    var data = cursor.data;\n\n    if (data.fingerprint) {\n      fingerprints[data.fingerprint] = data.value.important;\n    }\n\n    if (declarations2hash[data.id]) {\n      declarations2hash[data.id] = false;\n      result.eq.push(data);\n    } else {\n      result.ne1.push(data);\n    }\n  }\n\n  for (var cursor = declarations2.head; cursor; cursor = cursor.next) {\n    var data = cursor.data;\n\n    if (declarations2hash[data.id]) {\n      // if declarations1 has overriding declaration, this is not a difference\n      // but take in account !important - prev should be equal or greater than follow\n      if (hasOwnProperty.call(fingerprints, data.fingerprint) && Number(fingerprints[data.fingerprint]) >= Number(data.value.important)) {\n        result.ne2overrided.push(data);\n      } else {\n        result.ne2.push(data);\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction addSelectors(dest, source) {\n  source.each(function (sourceData) {\n    var newStr = sourceData.id;\n    var cursor = dest.head;\n\n    while (cursor) {\n      var nextStr = cursor.data.id;\n\n      if (nextStr === newStr) {\n        return;\n      }\n\n      if (nextStr > newStr) {\n        break;\n      }\n\n      cursor = cursor.next;\n    }\n\n    dest.insert(dest.createItem(sourceData), cursor);\n  });\n  return dest;\n} // check if simpleselectors has no equal specificity and element selector\n\n\nfunction hasSimilarSelectors(selectors1, selectors2) {\n  return selectors1.some(function (a) {\n    return selectors2.some(function (b) {\n      return a.compareMarker === b.compareMarker;\n    });\n  });\n} // test node can't to be skipped\n\n\nfunction unsafeToSkipNode(node) {\n  switch (node.type) {\n    case 'Ruleset':\n      // unsafe skip ruleset with selector similarities\n      return hasSimilarSelectors(node.selector.selectors, this);\n\n    case 'Atrule':\n      // can skip at-rules with blocks\n      if (node.block) {\n        // non-stylesheet blocks are safe to skip since have no selectors\n        if (node.block.type !== 'StyleSheet') {\n          return false;\n        } // unsafe skip at-rule if block contains something unsafe to skip\n\n\n        return node.block.rules.some(unsafeToSkipNode, this);\n      }\n\n      break;\n  } // unsafe by default\n\n\n  return true;\n}\n\nmodule.exports = {\n  isEqualLists: isEqualLists,\n  isEqualDeclarations: isEqualDeclarations,\n  compareDeclarations: compareDeclarations,\n  addSelectors: addSelectors,\n  hasSimilarSelectors: hasSimilarSelectors,\n  unsafeToSkipNode: unsafeToSkipNode\n};","map":null,"metadata":{},"sourceType":"script"}