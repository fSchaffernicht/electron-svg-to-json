{"ast":null,"code":"'use strict';\n\nvar ELEM_SEP = ':';\nexports.type = 'perItem';\nexports.active = false;\nexports.description = 'removes specified attributes';\nexports.params = {\n  attrs: []\n};\n/**\n * Remove attributes\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements\n *   attribute : regexp (wrapped into ^...$)\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\n\nexports.fn = function (item, params) {\n  // wrap into an array if params is not\n  if (!Array.isArray(params.attrs)) {\n    params.attrs = [params.attrs];\n  }\n\n  if (item.isElem()) {\n    // prepare patterns\n    var patterns = params.attrs.map(function (pattern) {\n      // apply to all elements if specifc element is omitted\n      if (pattern.indexOf(ELEM_SEP) === -1) {\n        pattern = ['.*', ELEM_SEP, pattern].join('');\n      } // create regexps for element and attribute name\n\n\n      return pattern.split(ELEM_SEP).map(function (value) {\n        // adjust single * to match anything\n        if (value === '*') {\n          value = '.*';\n        }\n\n        return new RegExp(['^', value, '$'].join(''), 'i');\n      });\n    }); // loop patterns\n\n    patterns.forEach(function (pattern) {\n      // matches element\n      if (pattern[0].test(item.elem)) {\n        // loop attributes\n        item.eachAttr(function (attr) {\n          var name = attr.name; // matches attribute name\n\n          if (pattern[1].test(name)) {\n            item.removeAttr(name);\n          }\n        });\n      }\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}