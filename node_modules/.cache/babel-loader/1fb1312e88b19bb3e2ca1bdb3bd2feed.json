{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'removes unknown elements content and attributes, removes attrs with default values';\nexports.params = {\n  unknownContent: true,\n  unknownAttrs: true,\n  defaultAttrs: true,\n  uselessOverrides: true,\n  keepDataAttrs: true\n};\n\nvar collections = require('./_collections'),\n    elems = collections.elems,\n    attrsGroups = collections.attrsGroups,\n    elemsGroups = collections.elemsGroups,\n    attrsGroupsDefaults = collections.attrsGroupsDefaults,\n    attrsInheritable = collections.inheritableAttrs; // collect and extend all references\n\n\nfor (var elem in elems) {\n  elem = elems[elem];\n\n  if (elem.attrsGroups) {\n    elem.attrs = elem.attrs || [];\n    elem.attrsGroups.forEach(function (attrsGroupName) {\n      elem.attrs = elem.attrs.concat(attrsGroups[attrsGroupName]);\n      var groupDefaults = attrsGroupsDefaults[attrsGroupName];\n\n      if (groupDefaults) {\n        elem.defaults = elem.defaults || {};\n\n        for (var attrName in groupDefaults) {\n          elem.defaults[attrName] = groupDefaults[attrName];\n        }\n      }\n    });\n  }\n\n  if (elem.contentGroups) {\n    elem.content = elem.content || [];\n    elem.contentGroups.forEach(function (contentGroupName) {\n      elem.content = elem.content.concat(elemsGroups[contentGroupName]);\n    });\n  }\n}\n/**\n * Remove unknown elements content and attributes,\n * remove attributes with default values.\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (item, params) {\n  // elems w/o namespace prefix\n  if (item.isElem() && !item.prefix) {\n    var elem = item.elem; // remove unknown element's content\n\n    if (params.unknownContent && !item.isEmpty() && elems[elem] && // make sure we know of this element before checking its children\n    elem !== 'foreignObject' // Don't check foreignObject\n    ) {\n        item.content.forEach(function (content, i) {\n          if (content.isElem() && !content.prefix && (elems[elem].content && // Do we have a record of its permitted content?\n          elems[elem].content.indexOf(content.elem) === -1 || !elems[elem].content && // we dont know about its permitted content\n          !elems[content.elem] // check that we know about the element at all\n          )) {\n            item.content.splice(i, 1);\n          }\n        });\n      } // remove element's unknown attrs and attrs with default values\n\n\n    if (elems[elem] && elems[elem].attrs) {\n      item.eachAttr(function (attr) {\n        if (attr.name !== 'xmlns' && (attr.prefix === 'xml' || !attr.prefix) && (!params.keepDataAttrs || attr.name.indexOf('data-') != 0)) {\n          if ( // unknown attrs\n          params.unknownAttrs && elems[elem].attrs.indexOf(attr.name) === -1 || // attrs with default values\n          params.defaultAttrs && elems[elem].defaults && elems[elem].defaults[attr.name] === attr.value && (attrsInheritable.indexOf(attr.name) < 0 || !item.parentNode.computedAttr(attr.name)) || // useless overrides\n          params.uselessOverrides && attrsInheritable.indexOf(attr.name) > -1 && item.parentNode.computedAttr(attr.name, attr.value)) {\n            item.removeAttr(attr.name);\n          }\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}