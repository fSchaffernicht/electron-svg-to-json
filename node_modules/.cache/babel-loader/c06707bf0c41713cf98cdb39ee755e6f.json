{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\dev\\\\electron-svg-to-json\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar htmlparser = require(\"htmlparser2\");\n\nvar svgo = require('svgo');\n\nvar filterTags = function filterTags(node) {\n  return node.filter(function (n) {\n    return n.type === 'tag' || n.type === 'text' && /([^\\s])/.test(n.data);\n  });\n};\n\nvar setRoot = function setRoot(source) {\n  if (Array.isArray(source)) {\n    var onlyTag = filterTags(source);\n    return onlyTag.length === 1 ? onlyTag[0] : onlyTag;\n  }\n\n  return source;\n};\n\nvar camelCase = function camelCase(prop) {\n  return prop.replace(/[-|:]([a-z])/gi, function (all, letter) {\n    return letter.toUpperCase();\n  });\n};\n\nvar isDataAttr = function isDataAttr(prop) {\n  return /^data(-\\w+)/.test(prop);\n};\n\nvar generate = function generate(source) {\n  var root = setRoot(source);\n  var obj = {};\n\n  if (Array.isArray(root)) {\n    return root.map(function (node) {\n      return generate(node);\n    });\n  }\n\n  if (root.type === 'tag') {\n    obj.name = root.name;\n\n    if (root.attribs) {\n      obj.attrs = {};\n\n      for (var attr in root.attribs) {\n        if (root.attribs.hasOwnProperty(attr)) {\n          obj.attrs[isDataAttr(attr) ? attr : camelCase(attr)] = root.attribs[attr];\n        }\n      }\n    }\n\n    if (root.children) {\n      obj.childs = filterTags(root.children).map(function (node) {\n        return generate(node);\n      });\n      if (!obj.childs.length) delete obj.childs;\n    }\n  } else if (root.type === 'text') {\n    obj.text = root.data;\n  }\n\n  return obj;\n};\n\nvar optimize = function optimize(should, input, plugins, callback) {\n  should ? new svgo(plugins).optimize(input, function (result) {\n    return callback(result.data);\n  }) : callback(input);\n};\n\nvar parseAndGenerate = function parseAndGenerate(input, callback) {\n  var dom = htmlparser.parseDOM(input, {\n    xmlMode: true\n  });\n  callback(generate(dom), setRoot(dom));\n};\n\nmodule.exports = function (input, options, callback) {\n  var initialConfig = {\n    svgo: false,\n    svgoConfig: {\n      plugins: [{\n        removeStyleElement: true\n      }, {\n        removeAttrs: {\n          attrs: '(stroke-width|stroke-linecap|stroke-linejoin)'\n        }\n      }],\n      multipass: true\n    },\n    title: null,\n    pathsKey: null,\n    customAttrs: {}\n  };\n  var config = Object.assign({}, initialConfig, options);\n  var hasCustomAttrs = Object.getOwnPropertyNames(config.customAttrs).length !== 0;\n\n  var wrapInKey = function wrapInKey(key, node) {\n    return _defineProperty({}, key, node);\n  };\n\n  var _processOne = function _processOne(node, more) {\n    var nod = config.pathsKey ? wrapInKey(config.pathsKey, node) : node;\n    return hasCustomAttrs ? Object.assign({}, nod, config.customAttrs, more) : Object.assign({}, nod, more);\n  };\n\n  return optimize(config.svgo, input, config.svgoConfig, function (r) {\n    parseAndGenerate(r, function (generated, root) {\n      var isArray = Array.isArray(root);\n      var more = config.title ? {\n        title: config.title\n      } : {};\n\n      if (isArray) {\n        callback(generated.map(function (node, i) {\n          return _processOne(node, more);\n        }));\n      } else {\n        callback(_processOne(generated, more));\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}