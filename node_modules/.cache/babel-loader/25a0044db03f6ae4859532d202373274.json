{"ast":null,"code":"var utils = require('./utils.js');\n\nvar walkRules = require('../../utils/walk.js').rules;\n/*\n    At this step all rules has single simple selector. We try to join by equal\n    declaration blocks to first rule, e.g.\n\n    .a { color: red }\n    b { ... }\n    .b { color: red }\n    ->\n    .a, .b { color: red }\n    b { ... }\n*/\n\n\nfunction processRuleset(node, item, list) {\n  var selectors = node.selector.selectors;\n  var declarations = node.block.declarations;\n  var nodeCompareMarker = selectors.first().compareMarker;\n  var skippedCompareMarkers = {};\n  list.nextUntil(item.next, function (next, nextItem) {\n    // skip non-ruleset node if safe\n    if (next.type !== 'Ruleset') {\n      return utils.unsafeToSkipNode.call(selectors, next);\n    }\n\n    if (node.pseudoSignature !== next.pseudoSignature) {\n      return true;\n    }\n\n    var nextFirstSelector = next.selector.selectors.head;\n    var nextDeclarations = next.block.declarations;\n    var nextCompareMarker = nextFirstSelector.data.compareMarker; // if next ruleset has same marked as one of skipped then stop joining\n\n    if (nextCompareMarker in skippedCompareMarkers) {\n      return true;\n    } // try to join by selectors\n\n\n    if (selectors.head === selectors.tail) {\n      if (selectors.first().id === nextFirstSelector.data.id) {\n        declarations.appendList(nextDeclarations);\n        list.remove(nextItem);\n        return;\n      }\n    } // try to join by properties\n\n\n    if (utils.isEqualDeclarations(declarations, nextDeclarations)) {\n      var nextStr = nextFirstSelector.data.id;\n      selectors.some(function (data, item) {\n        var curStr = data.id;\n\n        if (nextStr < curStr) {\n          selectors.insert(nextFirstSelector, item);\n          return true;\n        }\n\n        if (!item.next) {\n          selectors.insert(nextFirstSelector);\n          return true;\n        }\n      });\n      list.remove(nextItem);\n      return;\n    } // go to next ruleset if current one can be skipped (has no equal specificity nor element selector)\n\n\n    if (nextCompareMarker === nodeCompareMarker) {\n      return true;\n    }\n\n    skippedCompareMarkers[nextCompareMarker] = true;\n  });\n}\n\n;\n\nmodule.exports = function mergeRuleset(ast) {\n  walkRules(ast, function (node, item, list) {\n    if (node.type === 'Ruleset') {\n      processRuleset(node, item, list);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}