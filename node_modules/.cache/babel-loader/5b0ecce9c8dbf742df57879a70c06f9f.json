{"ast":null,"code":"'use strict';\n\nvar EXTEND = require('whet.extend'),\n    textElem = require('../../plugins/_collections.js').elemsGroups.textContent.concat('title');\n\nvar defaults = {\n  doctypeStart: '<!DOCTYPE',\n  doctypeEnd: '>',\n  procInstStart: '<?',\n  procInstEnd: '?>',\n  tagOpenStart: '<',\n  tagOpenEnd: '>',\n  tagCloseStart: '</',\n  tagCloseEnd: '>',\n  tagShortStart: '<',\n  tagShortEnd: '/>',\n  attrStart: '=\"',\n  attrEnd: '\"',\n  commentStart: '<!--',\n  commentEnd: '-->',\n  cdataStart: '<![CDATA[',\n  cdataEnd: ']]>',\n  textStart: '',\n  textEnd: '',\n  indent: 4,\n  regEntities: /[&'\"<>]/g,\n  regValEntities: /[&\"<>]/g,\n  encodeEntity: encodeEntity,\n  pretty: false,\n  useShortTags: true\n};\nvar entities = {\n  '&': '&amp;',\n  '\\'': '&apos;',\n  '\"': '&quot;',\n  '>': '&gt;',\n  '<': '&lt;'\n};\n/**\n * Convert SVG-as-JS object to SVG (XML) string.\n *\n * @param {Object} data input data\n * @param {Object} config config\n *\n * @return {Object} output data\n */\n\nmodule.exports = function (data, config) {\n  return new JS2SVG(config).convert(data);\n};\n\nfunction JS2SVG(config) {\n  if (config) {\n    this.config = EXTEND(true, {}, defaults, config);\n  } else {\n    this.config = defaults;\n  }\n\n  var indent = this.config.indent;\n\n  if (typeof indent == 'number' && !isNaN(indent)) {\n    this.config.indent = '';\n\n    for (var i = indent; i-- > 0;) {\n      this.config.indent += ' ';\n    }\n  } else if (typeof indent != 'string') {\n    this.config.indent = '    ';\n  }\n\n  if (this.config.pretty) {\n    this.config.doctypeEnd += '\\n';\n    this.config.procInstEnd += '\\n';\n    this.config.commentEnd += '\\n';\n    this.config.cdataEnd += '\\n';\n    this.config.tagShortEnd += '\\n';\n    this.config.tagOpenEnd += '\\n';\n    this.config.tagCloseEnd += '\\n';\n    this.config.textEnd += '\\n';\n  }\n\n  this.indentLevel = 0;\n  this.textContext = null;\n}\n\nfunction encodeEntity(char) {\n  return entities[char];\n}\n/**\n * Start conversion.\n *\n * @param {Object} data input data\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.convert = function (data) {\n  var svg = '';\n\n  if (data.content) {\n    this.indentLevel++;\n    data.content.forEach(function (item) {\n      if (item.elem) {\n        svg += this.createElem(item);\n      } else if (item.text) {\n        svg += this.createText(item.text);\n      } else if (item.doctype) {\n        svg += this.createDoctype(item.doctype);\n      } else if (item.processinginstruction) {\n        svg += this.createProcInst(item.processinginstruction);\n      } else if (item.comment) {\n        svg += this.createComment(item.comment);\n      } else if (item.cdata) {\n        svg += this.createCDATA(item.cdata);\n      }\n    }, this);\n  }\n\n  this.indentLevel--;\n  return {\n    data: svg,\n    info: {\n      width: this.width,\n      height: this.height\n    }\n  };\n};\n/**\n * Create indent string in accordance with the current node level.\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createIndent = function () {\n  var indent = '';\n\n  if (this.config.pretty && !this.textContext) {\n    for (var i = 1; i < this.indentLevel; i++) {\n      indent += this.config.indent;\n    }\n  }\n\n  return indent;\n};\n/**\n * Create doctype tag.\n *\n * @param {String} doctype doctype body string\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createDoctype = function (doctype) {\n  return this.config.doctypeStart + doctype + this.config.doctypeEnd;\n};\n/**\n * Create XML Processing Instruction tag.\n *\n * @param {Object} instruction instruction object\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createProcInst = function (instruction) {\n  return this.config.procInstStart + instruction.name + ' ' + instruction.body + this.config.procInstEnd;\n};\n/**\n * Create comment tag.\n *\n * @param {String} comment comment body\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createComment = function (comment) {\n  return this.config.commentStart + comment + this.config.commentEnd;\n};\n/**\n * Create CDATA section.\n *\n * @param {String} cdata CDATA body\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createCDATA = function (cdata) {\n  return this.createIndent() + this.config.cdataStart + cdata + this.config.cdataEnd;\n};\n/**\n * Create element tag.\n *\n * @param {Object} data element object\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createElem = function (data) {\n  // beautiful injection for obtaining SVG information :)\n  if (data.isElem('svg') && data.hasAttr('width') && data.hasAttr('height')) {\n    this.width = data.attr('width').value;\n    this.height = data.attr('height').value;\n  } // empty element and short tag\n\n\n  if (data.isEmpty()) {\n    if (this.config.useShortTags) {\n      return this.createIndent() + this.config.tagShortStart + data.elem + this.createAttrs(data) + this.config.tagShortEnd;\n    } else {\n      return this.createIndent() + this.config.tagShortStart + data.elem + this.createAttrs(data) + this.config.tagOpenEnd + this.config.tagCloseStart + data.elem + this.config.tagCloseEnd;\n    } // non-empty element\n\n  } else {\n    var tagOpenStart = this.config.tagOpenStart,\n        tagOpenEnd = this.config.tagOpenEnd,\n        tagCloseStart = this.config.tagCloseStart,\n        tagCloseEnd = this.config.tagCloseEnd,\n        openIndent = this.createIndent(),\n        textIndent = '',\n        processedData = '',\n        dataEnd = '';\n\n    if (this.textContext) {\n      tagOpenStart = defaults.tagOpenStart;\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      tagCloseEnd = defaults.tagCloseEnd;\n      openIndent = '';\n    } else if (data.isElem(textElem)) {\n      if (this.config.pretty) {\n        textIndent += openIndent + this.config.indent;\n      }\n\n      this.textContext = data;\n    }\n\n    processedData += this.convert(data).data;\n\n    if (this.textContext == data) {\n      this.textContext = null;\n      if (this.config.pretty) dataEnd = '\\n';\n    }\n\n    return openIndent + tagOpenStart + data.elem + this.createAttrs(data) + tagOpenEnd + textIndent + processedData + dataEnd + this.createIndent() + tagCloseStart + data.elem + tagCloseEnd;\n  }\n};\n/**\n * Create element attributes.\n *\n * @param {Object} elem attributes object\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createAttrs = function (elem) {\n  var attrs = '';\n  elem.eachAttr(function (attr) {\n    attrs += ' ' + attr.name + this.config.attrStart + String(attr.value).replace(this.config.regValEntities, this.config.encodeEntity) + this.config.attrEnd;\n  }, this);\n  return attrs;\n};\n/**\n * Create text node.\n *\n * @param {String} text text\n *\n * @return {String}\n */\n\n\nJS2SVG.prototype.createText = function (text) {\n  return this.createIndent() + this.config.textStart + text.replace(this.config.regEntities, this.config.encodeEntity) + (this.textContext ? '' : this.config.textEnd);\n};","map":null,"metadata":{},"sourceType":"script"}