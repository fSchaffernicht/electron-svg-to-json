{"ast":null,"code":"'use strict';\n\nexports.type = 'full';\nexports.active = true;\nexports.description = 'removes unused IDs and minifies used';\nexports.params = {\n  remove: true,\n  minify: true,\n  prefix: ''\n};\n\nvar referencesProps = require('./_collections').referencesProps,\n    regReferencesUrl = /\\burl\\((\"|')?#(.+?)\\1\\)/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /^(\\w+?)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    maxIDindex = generateIDchars.length - 1;\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (data, params) {\n  var currentID,\n      currentIDstring,\n      IDs = Object.create(null),\n      referencesIDs = Object.create(null),\n      idPrefix = 'id-',\n      // prefix IDs so that values like '__proto__' don't break the work\n  hasStyleOrScript = false;\n  /**\n   * Bananas!\n   *\n   * @param {Array} items input items\n   * @return {Array} output items\n   */\n\n  function monkeys(items) {\n    for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {\n      var item = items.content[i],\n          match; // check if <style> of <script> presents\n\n      if (item.isElem(styleOrScript)) {\n        hasStyleOrScript = true;\n        continue;\n      } // â€¦and don't remove any ID if yes\n\n\n      if (item.isElem()) {\n        item.eachAttr(function (attr) {\n          var key; // save IDs\n\n          if (attr.name === 'id') {\n            key = idPrefix + attr.value;\n\n            if (key in IDs) {\n              item.removeAttr('id');\n            } else {\n              IDs[key] = item;\n            }\n          } // save IDs url() references\n          else if (referencesProps.indexOf(attr.name) > -1) {\n              match = attr.value.match(regReferencesUrl);\n\n              if (match) {\n                key = idPrefix + match[2];\n\n                if (referencesIDs[key]) {\n                  referencesIDs[key].push(attr);\n                } else {\n                  referencesIDs[key] = [attr];\n                }\n              }\n            } // save IDs href references\n            else if (attr.local === 'href' && (match = attr.value.match(regReferencesHref)) || attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))) {\n                key = idPrefix + match[1];\n\n                if (referencesIDs[key]) {\n                  referencesIDs[key].push(attr);\n                } else {\n                  referencesIDs[key] = [attr];\n                }\n              }\n        });\n      } // go deeper\n\n\n      if (item.content) {\n        monkeys(item);\n      }\n    }\n\n    return items;\n  }\n\n  data = monkeys(data);\n\n  if (hasStyleOrScript) {\n    return data;\n  }\n\n  for (var k in referencesIDs) {\n    if (IDs[k]) {\n      // replace referenced IDs with the minified ones\n      if (params.minify) {\n        currentIDstring = getIDstring(currentID = generateID(currentID), params);\n        IDs[k].attr('id').value = currentIDstring;\n        referencesIDs[k].forEach(function (attr) {\n          k = k.replace(idPrefix, '');\n          attr.value = attr.value.replace('#' + k, '#' + currentIDstring).replace(k + '.', currentIDstring + '.');\n        });\n      } // don't remove referenced IDs\n\n\n      delete IDs[idPrefix + k];\n    }\n  } // remove non-referenced IDs attributes from elements\n\n\n  if (params.remove) {\n    for (var ID in IDs) {\n      IDs[ID].removeAttr('id');\n    }\n  }\n\n  return data;\n};\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\n\n\nfunction generateID(currentID) {\n  if (!currentID) return [0];\n  currentID[currentID.length - 1]++;\n\n  for (var i = currentID.length - 1; i > 0; i--) {\n    if (currentID[i] > maxIDindex) {\n      currentID[i] = 0;\n\n      if (currentID[i - 1] !== undefined) {\n        currentID[i - 1]++;\n      }\n    }\n  }\n\n  if (currentID[0] > maxIDindex) {\n    currentID[0] = 0;\n    currentID.unshift(0);\n  }\n\n  return currentID;\n}\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\n\n\nfunction getIDstring(arr, params) {\n  var str = params.prefix;\n  arr.forEach(function (i) {\n    str += generateIDchars[i];\n  });\n  return str;\n}","map":null,"metadata":{},"sourceType":"script"}