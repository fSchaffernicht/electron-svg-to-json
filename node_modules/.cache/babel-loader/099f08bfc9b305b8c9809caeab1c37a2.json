{"ast":null,"code":"var List = require('../utils/list');\n\nvar usageUtils = require('./usage');\n\nvar clean = require('./clean');\n\nvar compress = require('./compress');\n\nvar restructureBlock = require('./restructure');\n\nvar walkRules = require('../utils/walk').rules;\n\nfunction readBlock(stylesheet) {\n  var buffer = new List();\n  var nonSpaceTokenInBuffer = false;\n  var protectedComment;\n  stylesheet.rules.nextUntil(stylesheet.rules.head, function (node, item, list) {\n    if (node.type === 'Comment' && node.value.charAt(0) === '!') {\n      if (nonSpaceTokenInBuffer || protectedComment) {\n        return true;\n      }\n\n      list.remove(item);\n      protectedComment = node;\n      return;\n    }\n\n    if (node.type !== 'Space') {\n      nonSpaceTokenInBuffer = true;\n    }\n\n    buffer.insert(list.remove(item));\n  });\n  return {\n    comment: protectedComment,\n    stylesheet: {\n      type: 'StyleSheet',\n      rules: buffer\n    }\n  };\n}\n\nfunction compressBlock(ast, usageData, num, logger) {\n  logger('Compress block #' + num, null, true);\n  var seed = 1;\n  ast.firstAtrulesAllowed = ast.firstAtrulesAllowed;\n  walkRules(ast, function () {\n    if (!this.stylesheet.id) {\n      this.stylesheet.id = seed++;\n    }\n  });\n  logger('init', ast); // remove redundant\n\n  clean(ast, usageData);\n  logger('clean', ast); // compress nodes\n\n  compress(ast, usageData);\n  logger('compress', ast);\n  return ast;\n}\n\nmodule.exports = function compress(ast, options) {\n  options = options || {};\n  ast = ast || {\n    type: 'StyleSheet',\n    rules: new List()\n  };\n  var logger = typeof options.logger === 'function' ? options.logger : Function();\n  var restructuring = 'restructure' in options ? options.restructure : 'restructuring' in options ? options.restructuring : true;\n  var result = new List();\n  var block;\n  var firstAtrulesAllowed = true;\n  var blockNum = 1;\n  var blockRules;\n  var blockMode = false;\n  var usageData = false;\n  var info = ast.info || null;\n\n  if (ast.type !== 'StyleSheet') {\n    blockMode = true;\n    ast = {\n      type: 'StyleSheet',\n      rules: new List([{\n        type: 'Ruleset',\n        selector: {\n          type: 'Selector',\n          selectors: new List([{\n            type: 'SimpleSelector',\n            sequence: new List([{\n              type: 'Identifier',\n              name: 'x'\n            }])\n          }])\n        },\n        block: ast\n      }])\n    };\n  }\n\n  if (options.usage) {\n    usageData = usageUtils.buildIndex(options.usage);\n  }\n\n  do {\n    block = readBlock(ast); // console.log(JSON.stringify(block.stylesheet, null, 2));\n\n    block.stylesheet.firstAtrulesAllowed = firstAtrulesAllowed;\n    block.stylesheet = compressBlock(block.stylesheet, usageData, blockNum++, logger); // structure optimisations\n\n    if (restructuring) {\n      restructureBlock(block.stylesheet, usageData, logger);\n    }\n\n    blockRules = block.stylesheet.rules;\n\n    if (block.comment) {\n      // add \\n before comment if there is another content in result\n      if (!result.isEmpty()) {\n        result.insert(List.createItem({\n          type: 'Raw',\n          value: '\\n'\n        }));\n      }\n\n      result.insert(List.createItem(block.comment)); // add \\n after comment if block is not empty\n\n      if (!blockRules.isEmpty()) {\n        result.insert(List.createItem({\n          type: 'Raw',\n          value: '\\n'\n        }));\n      }\n    }\n\n    if (firstAtrulesAllowed && !blockRules.isEmpty()) {\n      var lastRule = blockRules.last();\n\n      if (lastRule.type !== 'Atrule' || lastRule.name !== 'import' && lastRule.name !== 'charset') {\n        firstAtrulesAllowed = false;\n      }\n    }\n\n    result.appendList(blockRules);\n  } while (!ast.rules.isEmpty());\n\n  if (blockMode) {\n    result = !result.isEmpty() ? result.first().block : {\n      type: 'Block',\n      info: info,\n      declarations: new List()\n    };\n  } else {\n    result = {\n      type: 'StyleSheet',\n      info: info,\n      rules: result\n    };\n  }\n\n  return {\n    ast: result\n  };\n};","map":null,"metadata":{},"sourceType":"script"}