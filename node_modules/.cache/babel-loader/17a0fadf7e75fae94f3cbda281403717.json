{"ast":null,"code":"'use strict';\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright Â© 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\n\nvar CONFIG = require('./svgo/config.js'),\n    SVG2JS = require('./svgo/svg2js.js'),\n    PLUGINS = require('./svgo/plugins.js'),\n    JSAPI = require('./svgo/jsAPI.js'),\n    JS2SVG = require('./svgo/js2svg.js');\n\nvar SVGO = module.exports = function (config) {\n  this.config = CONFIG(config);\n};\n\nSVGO.prototype.optimize = function (svgstr, callback) {\n  if (this.config.error) return callback(this.config);\n\n  var _this = this,\n      config = this.config,\n      maxPassCount = config.multipass ? 10 : 1,\n      counter = 0,\n      prevResultSize = Number.POSITIVE_INFINITY,\n      optimizeOnceCallback = function optimizeOnceCallback(svgjs) {\n    if (svgjs.error) {\n      callback(svgjs);\n      return;\n    }\n\n    if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n      prevResultSize = svgjs.data.length;\n\n      _this._optimizeOnce(svgjs.data, optimizeOnceCallback);\n    } else {\n      callback(svgjs);\n    }\n  };\n\n  _this._optimizeOnce(svgstr, optimizeOnceCallback);\n};\n\nSVGO.prototype._optimizeOnce = function (svgstr, callback) {\n  var config = this.config;\n  SVG2JS(svgstr, function (svgjs) {\n    if (svgjs.error) {\n      callback(svgjs);\n      return;\n    }\n\n    svgjs = PLUGINS(svgjs, config.plugins);\n    callback(JS2SVG(svgjs, config.js2svg));\n  });\n};\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\n\n\nSVGO.prototype.createContentItem = function (data) {\n  return new JSAPI(data);\n};","map":null,"metadata":{},"sourceType":"script"}