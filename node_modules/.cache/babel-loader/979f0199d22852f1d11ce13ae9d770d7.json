{"ast":null,"code":"var parse = require('./parser');\n\nvar compress = require('./compressor');\n\nvar translate = require('./utils/translate');\n\nvar translateWithSourceMap = require('./utils/translateWithSourceMap');\n\nvar walkers = require('./utils/walk');\n\nfunction debugOutput(name, options, startTime, data) {\n  if (options.debug) {\n    console.error('## ' + name + ' done in %d ms\\n', Date.now() - startTime);\n  }\n\n  return data;\n}\n\nfunction createDefaultLogger(level) {\n  var lastDebug;\n  return function logger(title, ast) {\n    var line = title;\n\n    if (ast) {\n      line = '[' + ((Date.now() - lastDebug) / 1000).toFixed(3) + 's] ' + line;\n    }\n\n    if (level > 1 && ast) {\n      var css = translate(ast, true); // when level 2, limit css to 256 symbols\n\n      if (level === 2 && css.length > 256) {\n        css = css.substr(0, 256) + '...';\n      }\n\n      line += '\\n  ' + css + '\\n';\n    }\n\n    console.error(line);\n    lastDebug = Date.now();\n  };\n}\n\nfunction copy(obj) {\n  var result = {};\n\n  for (var key in obj) {\n    result[key] = obj[key];\n  }\n\n  return result;\n}\n\nfunction buildCompressOptions(options) {\n  options = copy(options);\n\n  if (typeof options.logger !== 'function' && options.debug) {\n    options.logger = createDefaultLogger(options.debug);\n  }\n\n  return options;\n}\n\nfunction minify(context, source, options) {\n  options = options || {};\n  var filename = options.filename || '<unknown>';\n  var result; // parse\n\n  var ast = debugOutput('parsing', options, Date.now(), parse(source, {\n    context: context,\n    filename: filename,\n    positions: Boolean(options.sourceMap)\n  })); // compress\n\n  var compressResult = debugOutput('compress', options, Date.now(), compress(ast, buildCompressOptions(options))); // translate\n\n  if (options.sourceMap) {\n    result = debugOutput('translateWithSourceMap', options, Date.now(), function () {\n      var tmp = translateWithSourceMap(compressResult.ast);\n      tmp.map._file = filename; // since other tools can relay on file in source map transform chain\n\n      tmp.map.setSourceContent(filename, source);\n      return tmp;\n    }());\n  } else {\n    result = debugOutput('translate', options, Date.now(), {\n      css: translate(compressResult.ast),\n      map: null\n    });\n  }\n\n  return result;\n}\n\nfunction minifyStylesheet(source, options) {\n  return minify('stylesheet', source, options);\n}\n\n;\n\nfunction minifyBlock(source, options) {\n  return minify('block', source, options);\n}\n\nmodule.exports = {\n  version: require('../package.json').version,\n  // main methods\n  minify: minifyStylesheet,\n  minifyBlock: minifyBlock,\n  // step by step\n  parse: parse,\n  compress: compress,\n  translate: translate,\n  translateWithSourceMap: translateWithSourceMap,\n  // walkers\n  walk: walkers.all,\n  walkRules: walkers.rules,\n  walkRulesRight: walkers.rulesRight\n};","map":null,"metadata":{},"sourceType":"script"}