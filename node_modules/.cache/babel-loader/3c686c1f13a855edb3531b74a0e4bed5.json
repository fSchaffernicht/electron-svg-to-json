{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\nexports.params = {\n  currentColor: false,\n  names2hex: true,\n  rgb2hex: true,\n  shorthex: true,\n  shortname: true\n};\n\nvar collections = require('./_collections'),\n    rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)',\n    rComma = '\\\\s*,\\\\s*',\n    regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'),\n    regHEX = /^\\#(([a-fA-F0-9])\\2){3}$/,\n    none = /\\bnone\\b/i;\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see http://www.w3.org/TR/SVG/types.html#DataTypeColor\n * @see http://www.w3.org/TR/SVG/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (item, params) {\n  if (item.elem) {\n    item.eachAttr(function (attr) {\n      if (collections.colorsProps.indexOf(attr.name) > -1) {\n        var val = attr.value,\n            match; // Convert colors to currentColor\n\n        if (params.currentColor && (match = !val.match(none))) {\n          val = 'currentColor';\n        } // Convert color name keyword to long hex\n\n\n        if (params.names2hex && val.toLowerCase() in collections.colorsNames) {\n          val = collections.colorsNames[val.toLowerCase()];\n        } // Convert rgb() to long hex\n\n\n        if (params.rgb2hex && (match = val.match(regRGB))) {\n          match = match.slice(1, 4).map(function (m) {\n            if (m.indexOf('%') > -1) m = Math.round(parseFloat(m) * 2.55);\n            return Math.max(0, Math.min(m, 255));\n          });\n          val = rgb2hex(match);\n        } // Convert long hex to short hex\n\n\n        if (params.shorthex && (match = val.match(regHEX))) {\n          val = '#' + match[0][1] + match[0][3] + match[0][5];\n        } // Convert hex to short name\n\n\n        if (params.shortname && val in collections.colorsShortNames) {\n          val = collections.colorsShortNames[val];\n        }\n\n        attr.value = val;\n      }\n    });\n  }\n};\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @param {Array} rgb [r, g, b]\n * @return {String} #rrggbb\n *\n * @author Jed Schmidt\n */\n\n\nfunction rgb2hex(rgb) {\n  return '#' + ('00000' + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6).toUpperCase();\n}","map":null,"metadata":{},"sourceType":"script"}