{"ast":null,"code":"//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+--->| next-+--->| next-+--->| next-+--> null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\nfunction createItem(data) {\n  return {\n    data: data,\n    next: null,\n    prev: null\n  };\n}\n\nvar List = function List(values) {\n  this.cursor = null;\n  this.head = null;\n  this.tail = null;\n\n  if (Array.isArray(values)) {\n    var cursor = null;\n\n    for (var i = 0; i < values.length; i++) {\n      var item = createItem(values[i]);\n\n      if (cursor !== null) {\n        cursor.next = item;\n      } else {\n        this.head = item;\n      }\n\n      item.prev = cursor;\n      cursor = item;\n    }\n\n    this.tail = cursor;\n  }\n};\n\nObject.defineProperty(List.prototype, 'size', {\n  get: function get() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n      size++;\n      cursor = cursor.next;\n    }\n\n    return size;\n  }\n});\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.toArray = function () {\n  var cursor = this.head;\n  var result = [];\n\n  while (cursor) {\n    result.push(cursor.data);\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.toJSON = function () {\n  return this.toArray();\n};\n\nList.prototype.isEmpty = function () {\n  return this.head === null;\n};\n\nList.prototype.first = function () {\n  return this.head && this.head.data;\n};\n\nList.prototype.last = function () {\n  return this.tail && this.tail.data;\n};\n\nList.prototype.each = function (fn, context) {\n  var item;\n  var cursor = {\n    prev: null,\n    next: this.head,\n    cursor: this.cursor\n  };\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  this.cursor = cursor;\n\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n    fn.call(context, item.data, item, this);\n  } // pop cursor\n\n\n  this.cursor = this.cursor.cursor;\n};\n\nList.prototype.eachRight = function (fn, context) {\n  var item;\n  var cursor = {\n    prev: this.tail,\n    next: null,\n    cursor: this.cursor\n  };\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  this.cursor = cursor;\n\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n    fn.call(context, item.data, item, this);\n  } // pop cursor\n\n\n  this.cursor = this.cursor.cursor;\n};\n\nList.prototype.nextUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n\n  var item;\n  var cursor = {\n    prev: null,\n    next: start,\n    cursor: this.cursor\n  };\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  this.cursor = cursor;\n\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  } // pop cursor\n\n\n  this.cursor = this.cursor.cursor;\n};\n\nList.prototype.prevUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n\n  var item;\n  var cursor = {\n    prev: start,\n    next: null,\n    cursor: this.cursor\n  };\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  this.cursor = cursor;\n\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  } // pop cursor\n\n\n  this.cursor = this.cursor.cursor;\n};\n\nList.prototype.some = function (fn, context) {\n  var cursor = this.head;\n\n  if (context === undefined) {\n    context = this;\n  }\n\n  while (cursor !== null) {\n    if (fn.call(context, cursor.data, cursor, this)) {\n      return true;\n    }\n\n    cursor = cursor.next;\n  }\n\n  return false;\n};\n\nList.prototype.map = function (fn, context) {\n  var result = [];\n  var cursor = this.head;\n\n  if (context === undefined) {\n    context = this;\n  }\n\n  while (cursor !== null) {\n    result.push(fn.call(context, cursor.data, cursor, this));\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.copy = function () {\n  var result = new List();\n  var cursor = this.head;\n\n  while (cursor !== null) {\n    result.insert(createItem(cursor.data));\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.updateCursors = function (prevOld, prevNew, nextOld, nextNew) {\n  var cursor = this.cursor;\n\n  while (cursor !== null) {\n    if (prevNew === true || cursor.prev === prevOld) {\n      cursor.prev = prevNew;\n    }\n\n    if (nextNew === true || cursor.next === nextOld) {\n      cursor.next = nextNew;\n    }\n\n    cursor = cursor.cursor;\n  }\n};\n\nList.prototype.insert = function (item, before) {\n  if (before !== undefined && before !== null) {\n    // prev   before\n    //      ^\n    //     item\n    this.updateCursors(before.prev, item, before, item);\n\n    if (before.prev === null) {\n      // insert to the beginning of list\n      if (this.head !== before) {\n        throw new Error('before doesn\\'t below to list');\n      } // since head points to before therefore list doesn't empty\n      // no need to check tail\n\n\n      this.head = item;\n      before.prev = item;\n      item.next = before;\n      this.updateCursors(null, item);\n    } else {\n      // insert between two items\n      before.prev.next = item;\n      item.prev = before.prev;\n      before.prev = item;\n      item.next = before;\n    }\n  } else {\n    // tail\n    //      ^\n    //     item\n    this.updateCursors(this.tail, item, null, item); // insert to end of the list\n\n    if (this.tail !== null) {\n      // if list has a tail, then it also has a head, but head doesn't change\n      // last item -> new item\n      this.tail.next = item; // last item <- new item\n\n      item.prev = this.tail;\n    } else {\n      // if list has no a tail, then it also has no a head\n      // in this case points head to new item\n      this.head = item;\n    } // tail always start point to new item\n\n\n    this.tail = item;\n  }\n};\n\nList.prototype.remove = function (item) {\n  //      item\n  //       ^\n  // prev     next\n  this.updateCursors(item, item.prev, item, item.next);\n\n  if (item.prev !== null) {\n    item.prev.next = item.next;\n  } else {\n    if (this.head !== item) {\n      throw new Error('item doesn\\'t below to list');\n    }\n\n    this.head = item.next;\n  }\n\n  if (item.next !== null) {\n    item.next.prev = item.prev;\n  } else {\n    if (this.tail !== item) {\n      throw new Error('item doesn\\'t below to list');\n    }\n\n    this.tail = item.prev;\n  }\n\n  item.prev = null;\n  item.next = null;\n  return item;\n};\n\nList.prototype.appendList = function (list) {\n  // ignore empty lists\n  if (list.head === null) {\n    return;\n  }\n\n  this.updateCursors(this.tail, list.tail, null, list.head); // insert to end of the list\n\n  if (this.tail !== null) {\n    // if destination list has a tail, then it also has a head,\n    // but head doesn't change\n    // dest tail -> source head\n    this.tail.next = list.head; // dest tail <- source head\n\n    list.head.prev = this.tail;\n  } else {\n    // if list has no a tail, then it also has no a head\n    // in this case points head to new item\n    this.head = list.head;\n  } // tail always start point to new item\n\n\n  this.tail = list.tail;\n  list.head = null;\n  list.tail = null;\n};\n\nmodule.exports = List;","map":null,"metadata":{},"sourceType":"script"}