{"ast":null,"code":"var resolveProperty = require('../../utils/names.js').property;\n\nvar resolveKeyword = require('../../utils/names.js').keyword;\n\nvar walkRulesRight = require('../../utils/walk.js').rulesRight;\n\nvar translate = require('../../utils/translate.js');\n\nvar dontRestructure = {\n  'src': 1 // https://github.com/afelix/csso/issues/50\n\n};\nvar DONT_MIX_VALUE = {\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/display#Browser_compatibility\n  'display': /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,\n  // https://developer.mozilla.org/en/docs/Web/CSS/text-align\n  'text-align': /^(start|end|match-parent|justify-all)$/i\n};\nvar NEEDLESS_TABLE = {\n  'border-width': ['border'],\n  'border-style': ['border'],\n  'border-color': ['border'],\n  'border-top': ['border'],\n  'border-right': ['border'],\n  'border-bottom': ['border'],\n  'border-left': ['border'],\n  'border-top-width': ['border-top', 'border-width', 'border'],\n  'border-right-width': ['border-right', 'border-width', 'border'],\n  'border-bottom-width': ['border-bottom', 'border-width', 'border'],\n  'border-left-width': ['border-left', 'border-width', 'border'],\n  'border-top-style': ['border-top', 'border-style', 'border'],\n  'border-right-style': ['border-right', 'border-style', 'border'],\n  'border-bottom-style': ['border-bottom', 'border-style', 'border'],\n  'border-left-style': ['border-left', 'border-style', 'border'],\n  'border-top-color': ['border-top', 'border-color', 'border'],\n  'border-right-color': ['border-right', 'border-color', 'border'],\n  'border-bottom-color': ['border-bottom', 'border-color', 'border'],\n  'border-left-color': ['border-left', 'border-color', 'border'],\n  'margin-top': ['margin'],\n  'margin-right': ['margin'],\n  'margin-bottom': ['margin'],\n  'margin-left': ['margin'],\n  'padding-top': ['padding'],\n  'padding-right': ['padding'],\n  'padding-bottom': ['padding'],\n  'padding-left': ['padding'],\n  'font-style': ['font'],\n  'font-variant': ['font'],\n  'font-weight': ['font'],\n  'font-size': ['font'],\n  'font-family': ['font'],\n  'list-style-type': ['list-style'],\n  'list-style-position': ['list-style'],\n  'list-style-image': ['list-style']\n};\n\nfunction getPropertyFingerprint(propertyName, declaration, fingerprints) {\n  var realName = resolveProperty(propertyName).name;\n\n  if (realName === 'background' || realName === 'filter' && declaration.value.sequence.first().type === 'Progid') {\n    return propertyName + ':' + translate(declaration.value);\n  }\n\n  var declarationId = declaration.id;\n  var fingerprint = fingerprints[declarationId];\n\n  if (!fingerprint) {\n    var vendorId = '';\n    var hack9 = '';\n    var special = {};\n    declaration.value.sequence.each(function walk(node) {\n      switch (node.type) {\n        case 'Argument':\n        case 'Value':\n        case 'Braces':\n          node.sequence.each(walk);\n          break;\n\n        case 'Identifier':\n          var name = node.name;\n\n          if (!vendorId) {\n            vendorId = resolveKeyword(name).vendor;\n          }\n\n          if (name === '\\\\9') {\n            hack9 = name;\n          }\n\n          if (DONT_MIX_VALUE.hasOwnProperty(realName) && DONT_MIX_VALUE[realName].test(name)) {\n            special[name] = true;\n          }\n\n          break;\n\n        case 'Function':\n          var name = node.name;\n\n          if (!vendorId) {\n            vendorId = resolveKeyword(name).vendor;\n          }\n\n          if (name === 'rect') {\n            // there are 2 forms of rect:\n            //   rect(<top>, <right>, <bottom>, <left>) - standart\n            //   rect(<top> <right> <bottom> <left>) â€“ backwards compatible syntax\n            // only the same form values can be merged\n            if (node.arguments.size < 4) {\n              name = 'rect-backward';\n            }\n          }\n\n          special[name + '()'] = true; // check nested tokens too\n\n          node.arguments.each(walk);\n          break;\n\n        case 'Dimension':\n          var unit = node.unit;\n\n          switch (unit) {\n            // is not supported until IE11\n            case 'rem': // v* units is too buggy across browsers and better\n            // don't merge values with those units\n\n            case 'vw':\n            case 'vh':\n            case 'vmin':\n            case 'vmax':\n            case 'vm':\n              // IE9 supporting \"vm\" instead of \"vmin\".\n              special[unit] = true;\n              break;\n          }\n\n          break;\n      }\n    });\n    fingerprint = '|' + Object.keys(special).sort() + '|' + hack9 + vendorId;\n    fingerprints[declarationId] = fingerprint;\n  }\n\n  return propertyName + fingerprint;\n}\n\nfunction needless(props, declaration, fingerprints) {\n  var property = resolveProperty(declaration.property.name);\n\n  if (NEEDLESS_TABLE.hasOwnProperty(property.name)) {\n    var table = NEEDLESS_TABLE[property.name];\n\n    for (var i = 0; i < table.length; i++) {\n      var ppre = getPropertyFingerprint(property.prefix + table[i], declaration, fingerprints);\n      var prev = props[ppre];\n\n      if (prev && (!declaration.value.important || prev.item.data.value.important)) {\n        return prev;\n      }\n    }\n  }\n}\n\nfunction processRuleset(ruleset, item, list, props, fingerprints) {\n  var declarations = ruleset.block.declarations;\n  declarations.eachRight(function (declaration, declarationItem) {\n    var property = declaration.property.name;\n    var fingerprint = getPropertyFingerprint(property, declaration, fingerprints);\n    var prev = props[fingerprint];\n\n    if (prev && !dontRestructure.hasOwnProperty(property)) {\n      if (declaration.value.important && !prev.item.data.value.important) {\n        props[fingerprint] = {\n          block: declarations,\n          item: declarationItem\n        };\n        prev.block.remove(prev.item);\n        declaration.info = {\n          primary: declaration.info,\n          merged: prev.item.data.info\n        };\n      } else {\n        declarations.remove(declarationItem);\n        prev.item.data.info = {\n          primary: prev.item.data.info,\n          merged: declaration.info\n        };\n      }\n    } else {\n      var prev = needless(props, declaration, fingerprints);\n\n      if (prev) {\n        declarations.remove(declarationItem);\n        prev.item.data.info = {\n          primary: prev.item.data.info,\n          merged: declaration.info\n        };\n      } else {\n        declaration.fingerprint = fingerprint;\n        props[fingerprint] = {\n          block: declarations,\n          item: declarationItem\n        };\n      }\n    }\n  });\n\n  if (declarations.isEmpty()) {\n    list.remove(item);\n  }\n}\n\n;\n\nmodule.exports = function restructBlock(ast) {\n  var stylesheetMap = {};\n  var fingerprints = Object.create(null);\n  walkRulesRight(ast, function (node, item, list) {\n    if (node.type !== 'Ruleset') {\n      return;\n    }\n\n    var stylesheet = this.stylesheet;\n    var rulesetId = (node.pseudoSignature || '') + '|' + node.selector.selectors.first().id;\n    var rulesetMap;\n    var props;\n\n    if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n      rulesetMap = {};\n      stylesheetMap[stylesheet.id] = rulesetMap;\n    } else {\n      rulesetMap = stylesheetMap[stylesheet.id];\n    }\n\n    if (rulesetMap.hasOwnProperty(rulesetId)) {\n      props = rulesetMap[rulesetId];\n    } else {\n      props = {};\n      rulesetMap[rulesetId] = props;\n    }\n\n    processRuleset.call(this, node, item, list, props, fingerprints);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}