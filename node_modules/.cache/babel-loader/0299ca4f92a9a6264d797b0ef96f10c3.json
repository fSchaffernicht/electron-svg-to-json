{"ast":null,"code":"var List = require('../../utils/list.js');\n\nvar translate = require('../../utils/translate.js');\n\nvar walkRulesRight = require('../../utils/walk.js').rulesRight;\n\nvar REPLACE = 1;\nvar REMOVE = 2;\nvar TOP = 0;\nvar RIGHT = 1;\nvar BOTTOM = 2;\nvar LEFT = 3;\nvar SIDES = ['top', 'right', 'bottom', 'left'];\nvar SIDE = {\n  'margin-top': 'top',\n  'margin-right': 'right',\n  'margin-bottom': 'bottom',\n  'margin-left': 'left',\n  'padding-top': 'top',\n  'padding-right': 'right',\n  'padding-bottom': 'bottom',\n  'padding-left': 'left',\n  'border-top-color': 'top',\n  'border-right-color': 'right',\n  'border-bottom-color': 'bottom',\n  'border-left-color': 'left',\n  'border-top-width': 'top',\n  'border-right-width': 'right',\n  'border-bottom-width': 'bottom',\n  'border-left-width': 'left',\n  'border-top-style': 'top',\n  'border-right-style': 'right',\n  'border-bottom-style': 'bottom',\n  'border-left-style': 'left'\n};\nvar MAIN_PROPERTY = {\n  'margin': 'margin',\n  'margin-top': 'margin',\n  'margin-right': 'margin',\n  'margin-bottom': 'margin',\n  'margin-left': 'margin',\n  'padding': 'padding',\n  'padding-top': 'padding',\n  'padding-right': 'padding',\n  'padding-bottom': 'padding',\n  'padding-left': 'padding',\n  'border-color': 'border-color',\n  'border-top-color': 'border-color',\n  'border-right-color': 'border-color',\n  'border-bottom-color': 'border-color',\n  'border-left-color': 'border-color',\n  'border-width': 'border-width',\n  'border-top-width': 'border-width',\n  'border-right-width': 'border-width',\n  'border-bottom-width': 'border-width',\n  'border-left-width': 'border-width',\n  'border-style': 'border-style',\n  'border-top-style': 'border-style',\n  'border-right-style': 'border-style',\n  'border-bottom-style': 'border-style',\n  'border-left-style': 'border-style'\n};\n\nfunction TRBL(name) {\n  this.name = name;\n  this.info = null;\n  this.iehack = undefined;\n  this.sides = {\n    'top': null,\n    'right': null,\n    'bottom': null,\n    'left': null\n  };\n}\n\nTRBL.prototype.getValueSequence = function (value, count) {\n  var values = [];\n  var iehack = false;\n  var hasBadValues = value.sequence.some(function (child) {\n    var special = false;\n\n    switch (child.type) {\n      case 'Identifier':\n        switch (child.name) {\n          case '\\\\9':\n            iehack = true;\n            return;\n\n          case 'inherit':\n          case 'initial':\n          case 'unset':\n          case 'revert':\n            special = child.name;\n            break;\n        }\n\n        break;\n\n      case 'Dimension':\n        switch (child.unit) {\n          // is not supported until IE11\n          case 'rem': // v* units is too buggy across browsers and better\n          // don't merge values with those units\n\n          case 'vw':\n          case 'vh':\n          case 'vmin':\n          case 'vmax':\n          case 'vm':\n            // IE9 supporting \"vm\" instead of \"vmin\".\n            special = child.unit;\n            break;\n        }\n\n        break;\n\n      case 'Number':\n      case 'Percentage':\n        break;\n\n      case 'Space':\n        return false;\n      // ignore space\n\n      default:\n        return true;\n      // bad value\n    }\n\n    values.push({\n      node: child,\n      special: special,\n      important: value.important\n    });\n  });\n\n  if (hasBadValues || values.length > count) {\n    return false;\n  }\n\n  if (typeof this.iehack === 'boolean' && this.iehack !== iehack) {\n    return false;\n  }\n\n  this.iehack = iehack; // move outside\n\n  return values;\n};\n\nTRBL.prototype.canOverride = function (side, value) {\n  var currentValue = this.sides[side];\n  return !currentValue || value.important && !currentValue.important;\n};\n\nTRBL.prototype.add = function (name, value, info) {\n  function attemptToAdd() {\n    var sides = this.sides;\n    var side = SIDE[name];\n\n    if (side) {\n      if (side in sides) {\n        var values = this.getValueSequence(value, 1);\n\n        if (!values || !values.length) {\n          return false;\n        } // can mix only if specials are equal\n\n\n        for (var key in sides) {\n          if (sides[key] !== null && sides[key].special !== values[0].special) {\n            return false;\n          }\n        }\n\n        if (!this.canOverride(side, values[0])) {\n          return true;\n        }\n\n        sides[side] = values[0];\n        return true;\n      }\n    } else if (name === this.name) {\n      var values = this.getValueSequence(value, 4);\n\n      if (!values || !values.length) {\n        return false;\n      }\n\n      switch (values.length) {\n        case 1:\n          values[RIGHT] = values[TOP];\n          values[BOTTOM] = values[TOP];\n          values[LEFT] = values[TOP];\n          break;\n\n        case 2:\n          values[BOTTOM] = values[TOP];\n          values[LEFT] = values[RIGHT];\n          break;\n\n        case 3:\n          values[LEFT] = values[RIGHT];\n          break;\n      } // can mix only if specials are equal\n\n\n      for (var i = 0; i < 4; i++) {\n        for (var key in sides) {\n          if (sides[key] !== null && sides[key].special !== values[i].special) {\n            return false;\n          }\n        }\n      }\n\n      for (var i = 0; i < 4; i++) {\n        if (this.canOverride(SIDES[i], values[i])) {\n          sides[SIDES[i]] = values[i];\n        }\n      }\n\n      return true;\n    }\n  }\n\n  if (!attemptToAdd.call(this)) {\n    return false;\n  }\n\n  if (this.info) {\n    this.info = {\n      primary: this.info,\n      merged: info\n    };\n  } else {\n    this.info = info;\n  }\n\n  return true;\n};\n\nTRBL.prototype.isOkToMinimize = function () {\n  var top = this.sides.top;\n  var right = this.sides.right;\n  var bottom = this.sides.bottom;\n  var left = this.sides.left;\n\n  if (top && right && bottom && left) {\n    var important = top.important + right.important + bottom.important + left.important;\n    return important === 0 || important === 4;\n  }\n\n  return false;\n};\n\nTRBL.prototype.getValue = function () {\n  var result = [];\n  var sides = this.sides;\n  var values = [sides.top, sides.right, sides.bottom, sides.left];\n  var stringValues = [translate(sides.top.node), translate(sides.right.node), translate(sides.bottom.node), translate(sides.left.node)];\n\n  if (stringValues[LEFT] === stringValues[RIGHT]) {\n    values.pop();\n\n    if (stringValues[BOTTOM] === stringValues[TOP]) {\n      values.pop();\n\n      if (stringValues[RIGHT] === stringValues[TOP]) {\n        values.pop();\n      }\n    }\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (i) {\n      result.push({\n        type: 'Space'\n      });\n    }\n\n    result.push(values[i].node);\n  }\n\n  if (this.iehack) {\n    result.push({\n      type: 'Space'\n    }, {\n      type: 'Identifier',\n      info: {},\n      name: '\\\\9'\n    });\n  }\n\n  return {\n    type: 'Value',\n    info: {},\n    important: sides.top.important,\n    sequence: new List(result)\n  };\n};\n\nTRBL.prototype.getProperty = function () {\n  return {\n    type: 'Property',\n    info: {},\n    name: this.name\n  };\n};\n\nfunction processRuleset(ruleset, shorts, shortDeclarations, lastShortSelector) {\n  var declarations = ruleset.block.declarations;\n  var selector = ruleset.selector.selectors.first().id;\n  ruleset.block.declarations.eachRight(function (declaration, item) {\n    var property = declaration.property.name;\n\n    if (!MAIN_PROPERTY.hasOwnProperty(property)) {\n      return;\n    }\n\n    var key = MAIN_PROPERTY[property];\n    var shorthand;\n    var operation;\n\n    if (!lastShortSelector || selector === lastShortSelector) {\n      if (key in shorts) {\n        operation = REMOVE;\n        shorthand = shorts[key];\n      }\n    }\n\n    if (!shorthand || !shorthand.add(property, declaration.value, declaration.info)) {\n      operation = REPLACE;\n      shorthand = new TRBL(key);\n      shorthand.add(property, declaration.value, declaration.info);\n    }\n\n    shorts[key] = shorthand;\n    shortDeclarations.push({\n      operation: operation,\n      block: declarations,\n      item: item,\n      shorthand: shorthand\n    });\n    lastShortSelector = selector;\n  });\n  return lastShortSelector;\n}\n\n;\n\nfunction processShorthands(shortDeclarations, markDeclaration) {\n  shortDeclarations.forEach(function (item) {\n    var shorthand = item.shorthand;\n\n    if (!shorthand.isOkToMinimize()) {\n      return;\n    }\n\n    if (item.operation === REPLACE) {\n      item.item.data = markDeclaration({\n        type: 'Declaration',\n        info: shorthand.info,\n        property: shorthand.getProperty(),\n        value: shorthand.getValue(),\n        id: 0,\n        length: 0,\n        fingerprint: null\n      });\n    } else {\n      item.block.remove(item.item);\n    }\n  });\n}\n\n;\n\nmodule.exports = function restructBlock(ast, indexer) {\n  var stylesheetMap = {};\n  var shortDeclarations = [];\n  walkRulesRight(ast, function (node) {\n    if (node.type !== 'Ruleset') {\n      return;\n    }\n\n    var stylesheet = this.stylesheet;\n    var rulesetId = (node.pseudoSignature || '') + '|' + node.selector.selectors.first().id;\n    var rulesetMap;\n    var shorts;\n\n    if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n      rulesetMap = {\n        lastShortSelector: null\n      };\n      stylesheetMap[stylesheet.id] = rulesetMap;\n    } else {\n      rulesetMap = stylesheetMap[stylesheet.id];\n    }\n\n    if (rulesetMap.hasOwnProperty(rulesetId)) {\n      shorts = rulesetMap[rulesetId];\n    } else {\n      shorts = {};\n      rulesetMap[rulesetId] = shorts;\n    }\n\n    rulesetMap.lastShortSelector = processRuleset.call(this, node, shorts, shortDeclarations, rulesetMap.lastShortSelector);\n  });\n  processShorthands(shortDeclarations, indexer.declaration);\n};","map":null,"metadata":{},"sourceType":"script"}