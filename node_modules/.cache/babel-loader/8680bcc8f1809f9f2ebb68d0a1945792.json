{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'moves some group attributes to the content elements';\n\nvar collections = require('./_collections.js'),\n    pathElems = collections.pathElems.concat(['g', 'text']),\n    referencesProps = collections.referencesProps;\n/**\n * Move group attrs to the content elements.\n *\n * @example\n * <g transform=\"scale(2)\">\n *     <path transform=\"rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *                          â¬‡\n * <g>\n *     <path transform=\"scale(2) rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"scale(2) translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (item) {\n  // move group transform attr to content's pathElems\n  if (item.isElem('g') && item.hasAttr('transform') && !item.isEmpty() && !item.someAttr(function (attr) {\n    return ~referencesProps.indexOf(attr.name) && ~attr.value.indexOf('url(');\n  }) && item.content.every(function (inner) {\n    return inner.isElem(pathElems) && !inner.hasAttr('id');\n  })) {\n    item.content.forEach(function (inner) {\n      if (inner.hasAttr('transform')) {\n        inner.attr('transform').value = item.attr('transform').value + ' ' + inner.attr('transform').value;\n      } else {\n        inner.addAttr(item.attr('transform'));\n      }\n    });\n    item.removeAttr('transform');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}