{"ast":null,"code":"'use strict';\n\nvar TokenType = require('./const.js').TokenType;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar DOUBLE_QUOTE = 34;\nvar QUOTE = 39;\nvar RIGHT_PARENTHESIS = 41;\nvar STAR = 42;\nvar SLASH = 47;\nvar BACK_SLASH = 92;\nvar UNDERSCORE = 95;\nvar LEFT_CURLY_BRACE = 123;\nvar RIGHT_CURLY_BRACE = 125;\nvar WHITESPACE = 1;\nvar PUNCTUATOR = 2;\nvar DIGIT = 3;\nvar STRING_SQ = 4;\nvar STRING_DQ = 5;\nvar PUNCTUATION = {\n  9: TokenType.Tab,\n  // '\\t'\n  10: TokenType.Newline,\n  // '\\n'\n  13: TokenType.Newline,\n  // '\\r'\n  32: TokenType.Space,\n  // ' '\n  33: TokenType.ExclamationMark,\n  // '!'\n  34: TokenType.QuotationMark,\n  // '\"'\n  35: TokenType.NumberSign,\n  // '#'\n  36: TokenType.DollarSign,\n  // '$'\n  37: TokenType.PercentSign,\n  // '%'\n  38: TokenType.Ampersand,\n  // '&'\n  39: TokenType.Apostrophe,\n  // '\\''\n  40: TokenType.LeftParenthesis,\n  // '('\n  41: TokenType.RightParenthesis,\n  // ')'\n  42: TokenType.Asterisk,\n  // '*'\n  43: TokenType.PlusSign,\n  // '+'\n  44: TokenType.Comma,\n  // ','\n  45: TokenType.HyphenMinus,\n  // '-'\n  46: TokenType.FullStop,\n  // '.'\n  47: TokenType.Solidus,\n  // '/'\n  58: TokenType.Colon,\n  // ':'\n  59: TokenType.Semicolon,\n  // ';'\n  60: TokenType.LessThanSign,\n  // '<'\n  61: TokenType.EqualsSign,\n  // '='\n  62: TokenType.GreaterThanSign,\n  // '>'\n  63: TokenType.QuestionMark,\n  // '?'\n  64: TokenType.CommercialAt,\n  // '@'\n  91: TokenType.LeftSquareBracket,\n  // '['\n  93: TokenType.RightSquareBracket,\n  // ']'\n  94: TokenType.CircumflexAccent,\n  // '^'\n  95: TokenType.LowLine,\n  // '_'\n  123: TokenType.LeftCurlyBracket,\n  // '{'\n  124: TokenType.VerticalLine,\n  // '|'\n  125: TokenType.RightCurlyBracket,\n  // '}'\n  126: TokenType.Tilde // '~'\n\n};\nvar SYMBOL_CATEGORY_LENGTH = Math.max.apply(null, Object.keys(PUNCTUATION)) + 1;\nvar SYMBOL_CATEGORY = new Uint32Array(SYMBOL_CATEGORY_LENGTH);\nvar IS_PUNCTUATOR = new Uint32Array(SYMBOL_CATEGORY_LENGTH); // fill categories\n\nObject.keys(PUNCTUATION).forEach(function (key) {\n  SYMBOL_CATEGORY[Number(key)] = PUNCTUATOR;\n  IS_PUNCTUATOR[Number(key)] = PUNCTUATOR;\n}, SYMBOL_CATEGORY); // don't treat as punctuator\n\nIS_PUNCTUATOR[UNDERSCORE] = 0;\n\nfor (var i = 48; i <= 57; i++) {\n  SYMBOL_CATEGORY[i] = DIGIT;\n}\n\nSYMBOL_CATEGORY[SPACE] = WHITESPACE;\nSYMBOL_CATEGORY[TAB] = WHITESPACE;\nSYMBOL_CATEGORY[N] = WHITESPACE;\nSYMBOL_CATEGORY[R] = WHITESPACE;\nSYMBOL_CATEGORY[F] = WHITESPACE;\nSYMBOL_CATEGORY[QUOTE] = STRING_SQ;\nSYMBOL_CATEGORY[DOUBLE_QUOTE] = STRING_DQ; //\n// scanner\n//\n\nvar Scanner = function Scanner(source, initBlockMode, initLine, initColumn) {\n  this.source = source;\n  this.pos = source.charCodeAt(0) === 0xFEFF ? 1 : 0;\n  this.eof = this.pos === this.source.length;\n  this.lastPos = this.pos;\n  this.line = typeof initLine === 'undefined' ? 1 : initLine;\n  this.lineStartPos = typeof initColumn === 'undefined' ? -1 : -initColumn;\n  this.minBlockMode = initBlockMode ? 1 : 0;\n  this.blockMode = this.minBlockMode;\n  this.urlMode = false;\n  this.prevToken = null;\n  this.token = null;\n  this.buffer = [];\n};\n\nScanner.prototype = {\n  lookup: function lookup(offset) {\n    if (offset === 0) {\n      return this.token;\n    }\n\n    for (var i = this.buffer.length; !this.eof && i < offset; i++) {\n      this.buffer.push(this.getToken());\n    }\n\n    return offset <= this.buffer.length ? this.buffer[offset - 1] : null;\n  },\n  lookupType: function lookupType(offset, type) {\n    var token = this.lookup(offset);\n    return token !== null && token.type === type;\n  },\n  next: function next() {\n    this.prevToken = this.token;\n\n    if (this.buffer.length !== 0) {\n      this.token = this.buffer.shift();\n    } else if (!this.eof) {\n      this.token = this.getToken();\n    } else {\n      this.token = null;\n    }\n\n    return this.token;\n  },\n  tokenize: function tokenize() {\n    var tokens = [];\n\n    for (; this.pos < this.source.length; this.pos++) {\n      tokens.push(this.getToken());\n    }\n\n    return tokens;\n  },\n  getToken: function getToken() {\n    var code = this.source.charCodeAt(this.pos);\n    var line = this.line;\n    var column = this.pos - this.lineStartPos;\n    var lastPos;\n    var next;\n    var type;\n    var value;\n\n    switch (code < SYMBOL_CATEGORY_LENGTH ? SYMBOL_CATEGORY[code] : 0) {\n      case DIGIT:\n        type = TokenType.DecimalNumber;\n        value = this.readDecimalNumber();\n        break;\n\n      case STRING_SQ:\n      case STRING_DQ:\n        type = TokenType.String;\n        value = this.readString(code);\n        break;\n\n      case WHITESPACE:\n        type = TokenType.Space;\n        value = this.readSpaces();\n        break;\n\n      case PUNCTUATOR:\n        if (code === SLASH) {\n          next = this.source.charCodeAt(this.pos + 1);\n\n          if (next === STAR) {\n            // /*\n            type = TokenType.Comment;\n            value = this.readComment();\n            break;\n          } else if (next === SLASH && !this.urlMode) {\n            // //\n            if (this.blockMode > 0) {\n              var skip = 2;\n\n              while (this.source.charCodeAt(this.pos + 2) === SLASH) {\n                skip++;\n              }\n\n              type = TokenType.Identifier;\n              value = this.readIdentifier(skip);\n              this.urlMode = this.urlMode || value === 'url';\n            } else {\n              type = TokenType.Unknown;\n              value = this.readUnknown();\n            }\n\n            break;\n          }\n        }\n\n        type = PUNCTUATION[code];\n        value = String.fromCharCode(code);\n        this.pos++;\n\n        if (code === RIGHT_PARENTHESIS) {\n          this.urlMode = false;\n        } else if (code === LEFT_CURLY_BRACE) {\n          this.blockMode++;\n        } else if (code === RIGHT_CURLY_BRACE) {\n          if (this.blockMode > this.minBlockMode) {\n            this.blockMode--;\n          }\n        }\n\n        break;\n\n      default:\n        type = TokenType.Identifier;\n        value = this.readIdentifier(0);\n        this.urlMode = this.urlMode || value === 'url';\n    }\n\n    lastPos = this.lastPos === 0 ? this.lastPos : this.lastPos - 1;\n    this.lastPos = this.pos;\n    this.eof = this.pos === this.source.length;\n    return {\n      type: type,\n      value: value,\n      offset: lastPos,\n      line: line,\n      column: column\n    };\n  },\n  isNewline: function isNewline(code) {\n    if (code === N || code === F || code === R) {\n      if (code === R && this.pos + 1 < this.source.length && this.source.charCodeAt(this.pos + 1) === N) {\n        this.pos++;\n      }\n\n      this.line++;\n      this.lineStartPos = this.pos;\n      return true;\n    }\n\n    return false;\n  },\n  readSpaces: function readSpaces() {\n    var start = this.pos;\n\n    for (; this.pos < this.source.length; this.pos++) {\n      var code = this.source.charCodeAt(this.pos);\n\n      if (!this.isNewline(code) && code !== SPACE && code !== TAB) {\n        break;\n      }\n    }\n\n    return this.source.substring(start, this.pos);\n  },\n  readComment: function readComment() {\n    var start = this.pos;\n\n    for (this.pos += 2; this.pos < this.source.length; this.pos++) {\n      var code = this.source.charCodeAt(this.pos);\n\n      if (code === STAR) {\n        // */\n        if (this.source.charCodeAt(this.pos + 1) === SLASH) {\n          this.pos += 2;\n          break;\n        }\n      } else {\n        this.isNewline(code);\n      }\n    }\n\n    return this.source.substring(start, this.pos);\n  },\n  readUnknown: function readUnknown() {\n    var start = this.pos;\n\n    for (this.pos += 2; this.pos < this.source.length; this.pos++) {\n      if (this.isNewline(this.source.charCodeAt(this.pos), this.source)) {\n        break;\n      }\n    }\n\n    return this.source.substring(start, this.pos);\n  },\n  readString: function readString(quote) {\n    var start = this.pos;\n    var res = '';\n\n    for (this.pos++; this.pos < this.source.length; this.pos++) {\n      var code = this.source.charCodeAt(this.pos);\n\n      if (code === BACK_SLASH) {\n        var end = this.pos++;\n\n        if (this.isNewline(this.source.charCodeAt(this.pos), this.source)) {\n          res += this.source.substring(start, end);\n          start = this.pos + 1;\n        }\n      } else if (code === quote) {\n        this.pos++;\n        break;\n      }\n    }\n\n    return res + this.source.substring(start, this.pos);\n  },\n  readDecimalNumber: function readDecimalNumber() {\n    var start = this.pos;\n    var code;\n\n    for (this.pos++; this.pos < this.source.length; this.pos++) {\n      code = this.source.charCodeAt(this.pos);\n\n      if (code < 48 || code > 57) {\n        // 0 .. 9\n        break;\n      }\n    }\n\n    return this.source.substring(start, this.pos);\n  },\n  readIdentifier: function readIdentifier(skip) {\n    var start = this.pos;\n\n    for (this.pos += skip; this.pos < this.source.length; this.pos++) {\n      var code = this.source.charCodeAt(this.pos);\n\n      if (code === BACK_SLASH) {\n        this.pos++; // skip escaped unicode sequence that can ends with space\n        // [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\n\n        for (var i = 0; i < 7 && this.pos + i < this.source.length; i++) {\n          code = this.source.charCodeAt(this.pos + i);\n\n          if (i !== 6) {\n            if (code >= 48 && code <= 57 || // 0 .. 9\n            code >= 65 && code <= 70 || // A .. F\n            code >= 97 && code <= 102) {\n              // a .. f\n              continue;\n            }\n          }\n\n          if (i > 0) {\n            this.pos += i - 1;\n\n            if (code === SPACE || code === TAB || this.isNewline(code)) {\n              this.pos++;\n            }\n          }\n\n          break;\n        }\n      } else if (code < SYMBOL_CATEGORY_LENGTH && IS_PUNCTUATOR[code] === PUNCTUATOR) {\n        break;\n      }\n    }\n\n    return this.source.substring(start, this.pos);\n  }\n};\nmodule.exports = Scanner;","map":null,"metadata":{},"sourceType":"script"}