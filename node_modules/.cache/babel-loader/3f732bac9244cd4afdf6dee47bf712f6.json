{"ast":null,"code":"// Generated by CoffeeScript 1.3.3\n\n/*\n * whet.extend v0.9.7\n * Standalone port of jQuery.extend that actually works on node.js\n * https://github.com/Meettya/whet.extend\n *\n * Copyright 2012, Dmitrii Karpich\n * Released under the MIT License\n*/\n(function () {\n  var extend,\n      _findValue,\n      _isClass,\n      _isOwnProp,\n      _isPlainObj,\n      _isPrimitiveType,\n      _isTypeOf,\n      _prepareClone,\n      __slice = [].slice;\n\n  module.exports = extend = function extend() {\n    var args, copy, deep, name, options, target, _i, _len, _ref;\n\n    deep = arguments[0], target = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n\n    if (!_isClass(deep, 'Boolean')) {\n      args.unshift(target);\n      _ref = [deep || {}, false], target = _ref[0], deep = _ref[1];\n    }\n\n    if (_isPrimitiveType(target)) {\n      target = {};\n    }\n\n    for (_i = 0, _len = args.length; _i < _len; _i++) {\n      options = args[_i];\n\n      if (options != null) {\n        for (name in options) {\n          copy = options[name];\n          target[name] = _findValue(deep, copy, target[name]);\n        }\n      }\n    }\n\n    return target;\n  };\n  /*\n  Internal methods from now\n  */\n\n\n  _isClass = function _isClass(obj, str) {\n    return \"[object \" + str + \"]\" === Object.prototype.toString.call(obj);\n  };\n\n  _isOwnProp = function _isOwnProp(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  };\n\n  _isTypeOf = function _isTypeOf(obj, str) {\n    return str === typeof obj;\n  };\n\n  _isPlainObj = function _isPlainObj(obj) {\n    var key;\n\n    if (!obj) {\n      return false;\n    }\n\n    if (obj.nodeType || obj.setInterval || !_isClass(obj, 'Object')) {\n      return false;\n    }\n\n    if (obj.constructor && !_isOwnProp(obj, 'constructor') && !_isOwnProp(obj.constructor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n\n    for (key in obj) {\n      key;\n    }\n\n    return key === void 0 || _isOwnProp(obj, key);\n  };\n\n  _isPrimitiveType = function _isPrimitiveType(obj) {\n    return !(_isTypeOf(obj, 'object') || _isTypeOf(obj, 'function'));\n  };\n\n  _prepareClone = function _prepareClone(copy, src) {\n    if (_isClass(copy, 'Array')) {\n      if (_isClass(src, 'Array')) {\n        return src;\n      } else {\n        return [];\n      }\n    } else {\n      if (_isPlainObj(src)) {\n        return src;\n      } else {\n        return {};\n      }\n    }\n  };\n\n  _findValue = function _findValue(deep, copy, src) {\n    var clone;\n\n    if (deep && (_isClass(copy, 'Array') || _isPlainObj(copy))) {\n      clone = _prepareClone(copy, src);\n      return extend(deep, clone, copy);\n    } else {\n      return copy;\n    }\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}