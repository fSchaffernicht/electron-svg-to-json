{"ast":null,"code":"function walkRules(node, item, list) {\n  switch (node.type) {\n    case 'StyleSheet':\n      var oldStylesheet = this.stylesheet;\n      this.stylesheet = node;\n      node.rules.each(walkRules, this);\n      this.stylesheet = oldStylesheet;\n      break;\n\n    case 'Atrule':\n      if (node.block !== null) {\n        walkRules.call(this, node.block);\n      }\n\n      this.fn(node, item, list);\n      break;\n\n    case 'Ruleset':\n      this.fn(node, item, list);\n      break;\n  }\n}\n\nfunction walkRulesRight(node, item, list) {\n  switch (node.type) {\n    case 'StyleSheet':\n      var oldStylesheet = this.stylesheet;\n      this.stylesheet = node;\n      node.rules.eachRight(walkRulesRight, this);\n      this.stylesheet = oldStylesheet;\n      break;\n\n    case 'Atrule':\n      if (node.block !== null) {\n        walkRulesRight.call(this, node.block);\n      }\n\n      this.fn(node, item, list);\n      break;\n\n    case 'Ruleset':\n      this.fn(node, item, list);\n      break;\n  }\n}\n\nfunction walkAll(node, item, list) {\n  switch (node.type) {\n    case 'StyleSheet':\n      var oldStylesheet = this.stylesheet;\n      this.stylesheet = node;\n      node.rules.each(walkAll, this);\n      this.stylesheet = oldStylesheet;\n      break;\n\n    case 'Atrule':\n      if (node.expression !== null) {\n        walkAll.call(this, node.expression);\n      }\n\n      if (node.block !== null) {\n        walkAll.call(this, node.block);\n      }\n\n      break;\n\n    case 'Ruleset':\n      this.ruleset = node;\n\n      if (node.selector !== null) {\n        walkAll.call(this, node.selector);\n      }\n\n      walkAll.call(this, node.block);\n      this.ruleset = null;\n      break;\n\n    case 'Selector':\n      var oldSelector = this.selector;\n      this.selector = node;\n      node.selectors.each(walkAll, this);\n      this.selector = oldSelector;\n      break;\n\n    case 'Block':\n      node.declarations.each(walkAll, this);\n      break;\n\n    case 'Declaration':\n      this.declaration = node;\n      walkAll.call(this, node.property);\n      walkAll.call(this, node.value);\n      this.declaration = null;\n      break;\n\n    case 'Attribute':\n      walkAll.call(this, node.name);\n\n      if (node.value !== null) {\n        walkAll.call(this, node.value);\n      }\n\n      break;\n\n    case 'FunctionalPseudo':\n    case 'Function':\n      this['function'] = node;\n      node.arguments.each(walkAll, this);\n      this['function'] = null;\n      break;\n\n    case 'AtruleExpression':\n      this.atruleExpression = node;\n      node.sequence.each(walkAll, this);\n      this.atruleExpression = null;\n      break;\n\n    case 'Value':\n    case 'Argument':\n    case 'SimpleSelector':\n    case 'Braces':\n    case 'Negation':\n      node.sequence.each(walkAll, this);\n      break;\n\n    case 'Url':\n    case 'Progid':\n      walkAll.call(this, node.value);\n      break;\n    // nothig to do with\n    // case 'Property':\n    // case 'Combinator':\n    // case 'Dimension':\n    // case 'Hash':\n    // case 'Identifier':\n    // case 'Nth':\n    // case 'Class':\n    // case 'Id':\n    // case 'Percentage':\n    // case 'PseudoClass':\n    // case 'PseudoElement':\n    // case 'Space':\n    // case 'Number':\n    // case 'String':\n    // case 'Operator':\n    // case 'Raw':\n  }\n\n  this.fn(node, item, list);\n}\n\nfunction createContext(root, fn) {\n  var context = {\n    fn: fn,\n    root: root,\n    stylesheet: null,\n    atruleExpression: null,\n    ruleset: null,\n    selector: null,\n    declaration: null,\n    function: null\n  };\n  return context;\n}\n\nmodule.exports = {\n  all: function all(root, fn) {\n    walkAll.call(createContext(root, fn), root);\n  },\n  rules: function rules(root, fn) {\n    walkRules.call(createContext(root, fn), root);\n  },\n  rulesRight: function rulesRight(root, fn) {\n    walkRulesRight.call(createContext(root, fn), root);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}