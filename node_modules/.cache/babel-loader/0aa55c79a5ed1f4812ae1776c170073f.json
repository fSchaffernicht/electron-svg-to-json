{"ast":null,"code":"'use strict';\n\nvar FS = require('fs');\n\nvar yaml = require('js-yaml');\n\nvar EXTEND = require('whet.extend');\n/**\n * Read and/or extend/replace default config file,\n * prepare and optimize plugins array.\n *\n * @param {Object} [config] input config\n * @return {Object} output config\n */\n\n\nmodule.exports = function (config) {\n  var defaults;\n  config = typeof config == 'object' && config || {};\n\n  if (config.plugins && !Array.isArray(config.plugins)) {\n    return {\n      error: 'Error: Invalid plugins list. Provided \\'plugins\\' in config should be an array.'\n    };\n  }\n\n  if (config.full) {\n    defaults = config;\n\n    if (Array.isArray(defaults.plugins)) {\n      defaults.plugins = preparePluginsArray(defaults.plugins);\n    }\n  } else {\n    defaults = EXTEND({}, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));\n    defaults.plugins = preparePluginsArray(defaults.plugins);\n    defaults = extendConfig(defaults, config);\n  }\n\n  if ('floatPrecision' in config && Array.isArray(defaults.plugins)) {\n    defaults.plugins.forEach(function (plugin) {\n      if (plugin.params && 'floatPrecision' in plugin.params) {\n        // Don't touch default plugin params\n        plugin.params = EXTEND({}, plugin.params, {\n          floatPrecision: config.floatPrecision\n        });\n      }\n    });\n  }\n\n  if (Array.isArray(defaults.plugins)) {\n    defaults.plugins = optimizePluginsArray(defaults.plugins);\n  }\n\n  return defaults;\n};\n/**\n * Require() all plugins in array.\n *\n * @param {Array} plugins input plugins array\n * @return {Array} input plugins array of arrays\n */\n\n\nfunction preparePluginsArray(plugins) {\n  var plugin, key;\n  return plugins.map(function (item) {\n    // {}\n    if (typeof item === 'object') {\n      key = Object.keys(item)[0]; // custom\n\n      if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n        plugin = setupCustomPlugin(key, item[key]);\n      } else {\n        plugin = EXTEND({}, require('../../plugins/' + key)); // name: {}\n\n        if (typeof item[key] === 'object') {\n          plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n          plugin.active = true; // name: false\n        } else if (item[key] === false) {\n          plugin.active = false; // name: true\n        } else if (item[key] === true) {\n          plugin.active = true;\n        }\n\n        plugin.name = key;\n      } // name\n\n    } else {\n      plugin = EXTEND({}, require('../../plugins/' + item));\n      plugin.name = item;\n    }\n\n    return plugin;\n  });\n}\n/**\n * Extend plugins with the custom config object.\n *\n * @param {Array} plugins input plugins\n * @param {Object} config config\n * @return {Array} output plugins\n */\n\n\nfunction extendConfig(defaults, config) {\n  var key; // plugins\n\n  if (config.plugins) {\n    config.plugins.forEach(function (item) {\n      // {}\n      if (typeof item === 'object') {\n        key = Object.keys(item)[0]; // custom\n\n        if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n          defaults.plugins.push(setupCustomPlugin(key, item[key]));\n        } else {\n          defaults.plugins.forEach(function (plugin) {\n            if (plugin.name === key) {\n              // name: {}\n              if (typeof item[key] === 'object') {\n                plugin.params = EXTEND({}, plugin.params || {}, item[key]);\n                plugin.active = true; // name: false\n              } else if (item[key] === false) {\n                plugin.active = false; // name: true\n              } else if (item[key] === true) {\n                plugin.active = true;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  defaults.multipass = config.multipass; // svg2js\n\n  if (config.svg2js) {\n    defaults.svg2js = config.svg2js;\n  } // js2svg\n\n\n  if (config.js2svg) {\n    defaults.js2svg = config.js2svg;\n  }\n\n  return defaults;\n}\n/**\n * Setup and enable a custom plugin\n *\n * @param {String} plugin name\n * @param {Object} custom plugin\n * @return {Array} enabled plugin\n */\n\n\nfunction setupCustomPlugin(name, plugin) {\n  plugin.active = true;\n  plugin.params = EXTEND({}, plugin.params || {});\n  plugin.name = name;\n  return plugin;\n}\n/**\n * Try to group sequential elements of plugins array.\n *\n * @param {Object} plugins input plugins\n * @return {Array} output plugins\n */\n\n\nfunction optimizePluginsArray(plugins) {\n  var prev;\n  return plugins.reduce(function (plugins, item) {\n    if (prev && item.type == prev[0].type) {\n      prev.push(item);\n    } else {\n      plugins.push(prev = [item]);\n    }\n\n    return plugins;\n  }, []);\n}","map":null,"metadata":{},"sourceType":"script"}