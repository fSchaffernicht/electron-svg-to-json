{"ast":null,"code":"var resolveKeyword = require('../../../utils/names.js').keyword;\n\nvar walkRules = require('../../../utils/walk.js').rules;\n\nvar translate = require('../../../utils/translate.js');\n\nvar createDeclarationIndexer = require('./createDeclarationIndexer.js');\n\nvar processSelector = require('./processSelector.js');\n\nfunction walk(node, markDeclaration, usageData) {\n  switch (node.type) {\n    case 'Ruleset':\n      node.block.declarations.each(markDeclaration);\n      processSelector(node, usageData);\n      break;\n\n    case 'Atrule':\n      if (node.expression) {\n        node.expression.id = translate(node.expression);\n      } // compare keyframe selectors by its values\n      // NOTE: still no clarification about problems with keyframes selector grouping (issue #197)\n\n\n      if (resolveKeyword(node.name).name === 'keyframes') {\n        node.block.avoidRulesMerge = true;\n        /* probably we don't need to prevent those merges for @keyframes\n           TODO: need to be checked */\n\n        node.block.rules.each(function (ruleset) {\n          ruleset.selector.selectors.each(function (simpleselector) {\n            simpleselector.compareMarker = simpleselector.id;\n          });\n        });\n      }\n\n      break;\n  }\n}\n\n;\n\nmodule.exports = function prepare(ast, usageData) {\n  var markDeclaration = createDeclarationIndexer();\n  walkRules(ast, function (node) {\n    walk(node, markDeclaration, usageData);\n  });\n  return {\n    declaration: markDeclaration\n  };\n};","map":null,"metadata":{},"sourceType":"script"}