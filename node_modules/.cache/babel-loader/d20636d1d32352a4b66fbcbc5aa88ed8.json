{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = false;\nexports.description = 'rounds list of values to the fixed precision';\nexports.params = {\n  floatPrecision: 3,\n  leadingZero: true,\n  defaultPx: true,\n  convertToPx: true\n};\n\nvar regNumericValues = /^([\\-+]?\\d*\\.?\\d+([eE][\\-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/,\n    regSeparator = /\\s+,?\\s*|,\\s*/,\n    removeLeadingZero = require('../lib/svgo/tools').removeLeadingZero,\n    absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16\n};\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author kiyopikko\n */\n\n\nexports.fn = function (item, params) {\n  if (item.hasAttr('points')) {\n    roundValues(item.attrs.points);\n  }\n\n  if (item.hasAttr('enable-background')) {\n    roundValues(item.attrs['enable-background']);\n  }\n\n  if (item.hasAttr('viewBox')) {\n    roundValues(item.attrs.viewBox);\n  }\n\n  if (item.hasAttr('stroke-dasharray')) {\n    roundValues(item.attrs['stroke-dasharray']);\n  }\n\n  if (item.hasAttr('dx')) {\n    roundValues(item.attrs.dx);\n  }\n\n  if (item.hasAttr('dy')) {\n    roundValues(item.attrs.dy);\n  }\n\n  if (item.hasAttr('x')) {\n    roundValues(item.attrs.x);\n  }\n\n  if (item.hasAttr('y')) {\n    roundValues(item.attrs.y);\n  }\n\n  function roundValues($prop) {\n    var num,\n        units,\n        match,\n        matchNew,\n        lists = $prop.value,\n        listsArr = lists.split(regSeparator),\n        roundedListArr = [],\n        roundedList;\n    listsArr.forEach(function (elem) {\n      match = elem.match(regNumericValues);\n      matchNew = elem.match(/new/); // if attribute value matches regNumericValues\n\n      if (match) {\n        // round it to the fixed precision\n        num = +(+match[1]).toFixed(params.floatPrecision), units = match[3] || ''; // convert absolute values to pixels\n\n        if (params.convertToPx && units && units in absoluteLengths) {\n          var pxNum = +(absoluteLengths[units] * match[1]).toFixed(params.floatPrecision);\n          if (String(pxNum).length < match[0].length) num = pxNum, units = 'px';\n        } // and remove leading zero\n\n\n        if (params.leadingZero) {\n          num = removeLeadingZero(num);\n        } // remove default 'px' units\n\n\n        if (params.defaultPx && units === 'px') {\n          units = '';\n        }\n\n        roundedListArr.push(num + units);\n      } // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n          roundedListArr.push('new');\n        }\n    });\n    roundedList = roundedListArr.join(' ');\n    $prop.value = roundedList;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}